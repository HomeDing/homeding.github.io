<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc" />
  <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353" />
  <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
  <meta name='description' content='Examples and documentation for the HomeDing IoT Library'>
  <title>Micro Charts</title>
  <link Content-Type="text/css" href="/docstyle.css" rel="stylesheet" />
  <script src="/pages.js"></script>
  <script src="/story.js" type="module"></script>
  <style>
  .gpio { 
    display:inline-block;
    padding: 0 4px;
    border-radius: 4px;
    }
  .gpio.yellow {background-color: #FF0;}
  .gpio.red {background-color: #F22; color:white}
  .gpio.black {background-color: #111; color:white}
  .gpio.blue {background-color: #22F; color:white}
  </style>
</head>

<body scroll="0" style="padding:0;">
  <div class="u-navbar" style="margin-bottom: 0;">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z" />
    </svg>

    <a href="/index.htm" class="button">Home</a>
    <a href="/elements/index.htm" class="button">Elements</a>
    <a href="/boards/index.htm" class="button">Boards</a>
    <a href="/recipes/index.htm" class="button">Recipes</a>
  </div>

  <nav></nav>

  <main style="padding:1rem;max-width: 800px;">
    <h1>Micro Charts</h1>

    
      
    <p>Some visuals on the board and index implementation are not based on HTML but on SVG technology to visualize data.</p>
<p>SVG is not a pure graphic format that can be used for icons, it also offers a DOM and APIs on the elements that can be used almost like HTML objects.</p>
<p>The micro-charts in the HomeDing UI are a set for SVG and JavaScript files that can be embedded into a HTML page and offer a High Level API that is implemented in  javascript.</p>
<p><img src="/dev/microchart-line.png" alt="LineChart Screenshot" title="w200">
<img src="/dev/microchart-pie.png" alt="PieChart Screenshot" title="w200">
<img src="/dev/microchart-gauge.png" alt="GaugeChart Screenshot" title="w200"></p>
<h2>Embed a Micro Chart</h2>
<p>To embed a micro-chart the <code>object</code> HTML element is used that not just displays
the given initial SVG but also enables access to the implementation:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myChart<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lineChart.svg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/svg+xml<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span></code></pre>
<p>Inside the <code>linechart.svg</code> file the required additional javascript files are references and loaded automatically.</p>
<ul>
<li>microsvg.js - This file contains some useful functions for working with SVG elements.</li>
<li>linechart.js - This file implements the API for the chart</li>
</ul>
<h2>Using a Micro Chart by API</h2>
<p>The functionality for the chart is available when all files have been loaded by the API property of the document of the svg element.</p>
<p>As best practice the API should be extracted once and then stored in a variable that will be permanent available for direct access
in a window onload handler.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> chartObj<span class="token punctuation">;</span><br><span class="token keyword">var</span> chartAPI<span class="token punctuation">;</span><br><br>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  chartObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myChart'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  chartAPI <span class="token operator">=</span> chartObj<span class="token punctuation">.</span><span class="token function">getSVGDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>api<span class="token punctuation">;</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>All interactivity with the chart is then done using the API. The chart itself also implements autonomous functionality like handling clicking and hover events.</p>
<h2>Using the API</h2>
<p>All charts offer a similar pattern for usage in the API:</p>
<p>Before adding any data to the chart the chart needs to be configured by adding the parts like rulers, fix lines, legends or data bound elements.</p>
<p>This is done by passing the overall configuration structure to the <strong>setOptions</strong> method like:</p>
<pre class="language-javascript"><code class="language-javascript">chartAPI<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br>  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Room Humidity"</span><span class="token punctuation">,</span><br>  <span class="token literal-property property">units</span><span class="token operator">:</span> <span class="token string">"%"</span><span class="token punctuation">,</span><br>  <span class="token literal-property property">minimum</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><br>  <span class="token literal-property property">maximum</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span><br>  <span class="token literal-property property">segments</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>    <span class="token punctuation">{</span><br>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#ff4444'</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><br>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#44ff44'</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><br>      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#ff4444'</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">]</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>With some chart types additional elements can be added by using the <strong>add</strong> method:</p>
<pre class="language-javascript"><code class="language-javascript">chartAPI<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span></code></pre>
<p>The Data is added by using the <strong>draw</strong> method:</p>
<pre class="language-javascript"><code class="language-javascript">chartAPI<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span></code></pre>
<p>The <strong>clear</strong> method removes the actual data and deletes all elements representing data.</p>
<h2>See also</h2>
<ul>
<li><a href="/dev/microchart-line.htm">Line Chart</a></li>
<li><a href="/dev/microchart-pie.htm">Pie Chart</a></li>
<li><a href="/dev/microchart-gauge.htm">Gauge Chart</a></li>
</ul>


    
    <h2>Tags</h2>
    <div class="taglist"><a href="/tag/implementation.htm">Implementation</a><a href="/tag/system.htm">System</a><a href="/tag/wip.htm">Wip</a></div>
    
  </main>

  <script>
    const param = {
      MENU_MIN_WIDTH: 1030
    };

    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');

   if (window.innerWidth > param.MENU_MIN_WIDTH) {
      // menu is inside the page
      navObj.classList.add('open');
      navObj.classList.add('inpage');
    }

    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });

    lazyLoadHTM('nav', '/toc.htm');
  </script>
  
  </body>

</html>