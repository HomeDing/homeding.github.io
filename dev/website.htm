<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc" />
  <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353" />
  <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
  <meta name='description' content='Dashboard and Configuration Editor for IoT devices.'>
  <title>Embedded Web Site for IoT Devices.</title>
  <link Content-Type="text/css" href="/docstyle.css" rel="stylesheet" />
  <script src="/pages.js"></script>
</head>

<body scroll="0" style="padding:0;">
  <div class="u-header">
    <a href="/" title="Startpage"><img class="icon" src="/i/default.svg" /></a>
    <h1>HomeDing</h1>
  </div>

  <div class="u-navbar" style="margin-bottom: 0;">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z" />
    </svg>

    <a href="/index.htm" class="button">Home</a>
    <a href="/concepts/index.htm" class="button">Concepts</a>
    <a href="/elements/index.htm" class="button">Elements</a>
    <a href="/boards/index.htm" class="button">Boards</a>
    <a href="/recipes/index.htm" class="button">Recipes</a>
  </div>
  <nav class="inpage open"></nav>

  <main style="background-color:#eeeeee;padding:1rem">
    <h1>Embedded Web Site for IoT Devices.</h1>
<div class="plaincard"><p>Every device using the HomeDing library has an embedded web site and a built-in web server.
so it can be directly reached by using a standard browser.
The required files fit into 128k filespace to support even devices with small flash sizes.</p>
</div>
<p>Implementing a web site that fits into the very limited space of the flash memory is a challenge on its own but can be solved by using the power of the current browsers.</p>
<p>To make development of this web site less painful a nodejs based web site project is available that also simulates configured elements to a certain degree.</p>
<p>The structure of the provided web site with details on the individual pages can be found in <a href="/websitemap.htm">websitemap</a></p>
<h2>Technology selection</h2>
<p>Some reasonable decisions have to be made today (2019) so that all current browsers can be used to run the embedded web site.</p>
<p><strong>Images</strong> are implemented using SVG format wherever possible. It is nicely supported by all browsers today so no fallback needs to be implemented. As a welcome effect the SVG files for icons are smaller than bitmap based images.</p>
<p>See
<a href="https://caniuse.com/#feat=svg">https://caniuse.com/#feat=svg</a></p>
<p><strong>Scripts</strong> are implemented in JavaScript using the ES5 version or by using Typescript that is compiled and minified to ES5 version.</p>
<p>See <a href="https://caniuse.com/#feat=es5">https://caniuse.com/#feat=es5</a></p>
<p><strong>CSS Style sheets</strong> are implemented by using SCSS files beeing compiled to standard CSS. This allows structuring and commending the source code as well as  minimizing the output.</p>
<p><strong>Promises</strong> are really helpful when building SPA web applications using REST services. They are supported by most browsers and can be emulated for IE11 with a reasonable space.</p>
<p>A polyfill for IE11 is provided.</p>
<p>See <a href="https://caniuse.com/#feat=promises">https://caniuse.com/#feat=promises</a></p>
<h2>Implementation Details</h2>
<p>The development source for this web site can be found on github in the repository <a href="https://github.com/HomeDing/WebFiles">https://github.com/HomeDing/WebFiles</a>.
In the examples you can find the <code>data</code> folders that include the files as they need to be stored on the device.</p>
<p>There is a compilation from typescript into javascript and some packing of files required.</p>
<p>A standard nodejs based project helps creating these files and also give you a useful nodejs-express based server to make development easier.</p>
<p>The embedded web site itself
is implemented using the modern Single Page Applications (SPA) approach for web applications. To make this fit into the limited space a <code>micro</code> implementation is used that provides minimal HTML, JavaScript and CSS. They run smoothly even on mobile devices because they also need not much network bandwidth.</p>
<ul>
<li>
<p><code>/index.htm</code> =&gt; A static page with some internal links and showing some system information.</p>
</li>
<li>
<p><code>/ding-info.htm</code> =&gt; Configuration overview, Visualize all elements</p>
</li>
<li>
<p><code>/ding-ide.htm</code> =&gt; web based IDE to list and edit files.</p>
</li>
<li>
<p><code>/ding-log.htm</code> =&gt; show current system log information</p>
</li>
<li>
<p><code>/setup.htm</code> =&gt; Network setup dialog</p>
</li>
<li>
<p><code>/panel.htm</code> =&gt; A graphical overview of the defined actions between elements</p>
</li>
<li>
<p><code>/i/*.svg</code> icons for elements.</p>
</li>
<li>
<p><code>/src/*.ts</code> Typescript sources for micro ???.</p>
</li>
</ul>

  </main>

  <script>
    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');

    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });
    if (window.innerWidth > 880)
      navObj.classList.add('open');

    lazyLoadHTM('nav', '/toc.htm');
  </script>
  
  </body>

</html>