<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc" />
  <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353" />
  <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
  <meta name='description' content=''>
  <title>Using the deep sleep mode</title>
  <link Content-Type="text/css" href="/docstyle.css" rel="stylesheet" />
  <script src="/pages.js"></script>
</head>

<body scroll="0" style="padding:0;">
  <div class="u-header">
    <a href="/" title="Startpage"><img class="icon" src="/i/default.svg" /></a>
    <h1>HomeDing</h1>
  </div>

  <div class="u-navbar" style="margin-bottom: 0;">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z" />
    </svg>

    <a href="/index.htm" class="button">Home</a>
    <a href="/concepts/index.htm" class="button">Concepts</a>
    <a href="/elements/index.htm" class="button">Elements</a>
    <a href="/boards/index.htm" class="button">Boards</a>
    <a href="/recipes/index.htm" class="button">Recipes</a>
  </div>
  <nav class="inpage x  open"></nav>

  <main style="padding:1rem">
    <h1>Using the deep sleep mode</h1>
<p>In some use case there is not enough power available to run a device with a full web server functionality enabled all the day.</p>
<p>Examples:</p>
<ul>
<li>A button for a door bell should run for months / years but only needs to be active when a visitor come to the door.</li>
<li>A temperature sensor on the outside is placed where no constant power is available</li>
<li>Control that your plats have enough water.</li>
<li>Windows must be monitored to be closed and you don't want to have wires all across the walls.</li>
</ul>
<p>All of these use case not only must work they also must be reliable.</p>
<p>Handling low power situations successfully is a hard engineering job and some microprocessors are especially made for this purpose.
The capabilities of the device and sensors also significantly impact on the demands placed on the power supply.</p>
<p>The ESP8266 chips are <strong>not</strong> made for these extremely low power use cases as the minimal current is about 20 to 40 ÂµA. Other processors use 20 nA, 1000 times less.</p>
<p>Using WiFi network for data transport has a lot of advantages but is not energy efficient. E.g. registering a device on a WiFi network requires some significant time and sending WiFi signals also require a minimum of power.</p>
<p>Other network technologies allow sending data without registration so there is less startup time.</p>
<!-- How to implement an outdoor sensor with a solar panel and rechargeable battery is shown in the [Outdoor sensor story](/stories/story-outdoor.md). -->
<h2>Hardware requirements</h2>
<p>To make the deep sleep mode in the ESP8266 work 2 pins must be connected:</p>
<p>Pin RST and Pin GPIO16/D0.</p>
<p>to wake up after a deep sleep the sleep timer that is implemented in low-power hardware will pull GPIO16/D0 to GND fos some time and this will trigger a reset of the processor.</p>
<p>This connection is not available on nodeMCU and many other boards and must be connected externally.</p>
<h2>Deep Sleep</h2>
<p>The deep sleep mode is the answer of the ESP8266 SoC to get a minimum power consumption. In this mode most of the functionality is switched off and only some memory and a simple hardware based count-down timer are kept active.</p>
<p>To activate the deep sleep the deep sleep duration must be set in the <a href="/elements/device.htm">device element</a> using the <code>sleeptime</code> configuration.</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"device"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"0"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"sleeptime"</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span><br>      ...<br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>There is a maximum time the sleep mode can be activated about 71 min.</p>
<p>To start the sleep mode the <code>sleep</code> action must be sent to the device element e.g. after reading a sensor value:</p>
<pre><code>device/0?sleep=1
</code></pre>
<p>The actual sleep mode is delayed to give enough time to dispatch and process any pending actions. The board will give any existing element some <code>loop()</code> time to execute and when all elements are through the sleep mode will be started.</p>
<p>The delay will happen on the following conditions:</p>
<ul>
<li>An action is passed to the board to be dispatched.</li>
<li>When there was no wakeup from an previous sleep but any other reset reason.</li>
<li>When an element actively delays the sleep mode by calling <code>board-&gt;deferSleepMode()</code>.</li>
</ul>
<p>The sleep mode can also be disabled completely by sending a <code>sleep</code> action with value 0 to the device element:</p>
<pre><code>device/0?sleep=0
</code></pre>
<p>This allows configuring a device with the web ui when using the following sequence:</p>
<ol>
<li>
<p>reset the device using the RST button or by a power off on cycle. This will cause that the sleep mode will wait at least 60 seconds before getting started.</p>
</li>
<li>
<p>Open a browser to trigger the action to disable the sleep mode using the url</p>
<ul>
<li><a href="http://homeding/$board/device/0?nosleep">http://homeding/$board/device/0?nosleep</a></li>
</ul>
</li>
<li>
<p>Start the board or ide url of the device for working.</p>
<ul>
<li><a href="http://homeding/board.htm">http://homeding/board.htm</a></li>
<li><a href="http://homeding/microide.htm">http://homeding/microide.htm</a></li>
</ul>
</li>
</ol>
<h2>See also</h2>
<ul>
<li><a href="https://randomnerdtutorials.com/esp8266-deep-sleep-with-arduino-ide/">https://randomnerdtutorials.com/esp8266-deep-sleep-with-arduino-ide/</a></li>
<li><a href="https://diyprojects.io/esp8266-deep-sleep-mode-test-wake-pir-motion-detector/#.XkmIu0eSkuU">https://diyprojects.io/esp8266-deep-sleep-mode-test-wake-pir-motion-detector/#.XkmIu0eSkuU</a></li>
<li>Some chips cannot use the deep sleep more, see <a href="https://github.com/esp8266/Arduino/issues/6007">https://github.com/esp8266/Arduino/issues/6007</a></li>
<li><a href="/boards/watchdog.htm">Watchdog timers</a></li>
<li><a href="https://randomnerdtutorials.com/latching-power-switch-circuit-auto-power-off-circuit-esp32-esp8266-arduino/">https://randomnerdtutorials.com/latching-power-switch-circuit-auto-power-off-circuit-esp32-esp8266-arduino/</a></li>
</ul>
<h2>Tags</h2>
<p>#power #system #device</p>

  </main>

  <script>
    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');

    navObj.classList.toggle('open', (window.innerWidth > 880));

    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });

    lazyLoadHTM('nav', '/toc.htm');
  </script>
  
  </body>

</html>