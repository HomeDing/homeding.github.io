// CSS for HTML cards and card design without any dependencies.

@use "base";
@use "page";

// ===== card Layout settings =====
// The card layout is based on a grid of cards with a fixed width and height.
// The values are available as sass variables '$u-card-NNN'
// to be used in @media and @container rules
// and as CSS variables '--card-NNN' to enable overriding on card-containers.
// CSS variables cannot be used in @media and @container rules.

// 365 px

// pixel units are required to create exact card sizes.
$u-card-width: 280px;
$u-card-gap: 16px;

// ===== card style settings =====

// $u-card-shadow: 0.2em 0.2em 0.4em rgba(0, 0, 0, 0.2);

:root {
  /* pixel units are preferred to create exact card sizes. */
  --card-width: #{$u-card-width};
  --card-gap: #{$u-card-gap};

  // cards can have fixed or variable height specified by the --card-height variable.
  --card-height: 320px;

  // horizontal cards have fixed height and are stretched to the total width of the card-container.

  // Design of cards, colors borders, paddings
  --card-back: light-dark(white, black);
  --card-color: var(--main-color);
  --card-head: hsl(#{base.$u-hue} 20% 80%);
  --card-head-active: #{hsl(base.$u-hue, 80%, 80%)};
  --card-border: none;
  --card-padding: 0.5em;
  --card-image-size: 120px;
  --card-radius: 1em;
}

// ===== card container =====

// The card-container will contain and position all cards according to the given rules.
// By using some flags based on supplement class names
// Also it acts as a variable holder for card implementations that can overwrite the default values.
.card-container {
  display: flex;
  flex-wrap: wrap;

  // one column only as default
  width: 100%;
  gap: var(--card-gap); // $u-card-gap;
  // center in main container by default
  margin: 0 auto;

  >.card {
    position: relative;
    width: var(--card-width);
    height: var(--card-height);

    // used a card grid for normal cards (not horizonal)
    display: grid;
    grid-template: "header" auto "main" 1fr "footer" auto / auto;
    gap: 0;
    margin: 0;
    padding: 0;
    page-break-inside: avoid;
    overflow: hidden;
    background-color: var(--card-back);
    border: var(--card-border);
    border-radius: var(--card-radius);

    @media print {
      border: 1px solid var(--color);
    }

    // cards can be marked with class='wide' covering 2 columns
    &.wide {
      width: calc(var(--card-width) * 2 + var(--card-gap));
    }

    // cards can be marked with class='small' covering 1/2 column
    &.small {
      width: calc((var(--card-width) - var(--card-gap)) / 2);
      height: calc((var(--card-height) - var(--card-gap)) / 2);
    }

    &.shadow {
      box-shadow: var(--dropshadow);
    }

    // images as first element in card
    >svg:first-child,
    >img:first-child {
      grid-area: header;
      width: 100%;
      height: var(--card-image-size);
      object-fit: cover;

      &.icon {
        width: 2.75rem;
        height: 2.75rem;
      }
    }

    .header {
      grid-area: header;
      background-color: var(--card-head);
      padding: var(--card-padding);
      min-height: 2.75em; // with or without icon
      max-height: 4rem;

      h3,
      h4 {
        margin: 0;
      }

      // images in header
      >svg:first-child,
      >img:first-child {
        // display: block;
        float: left;
        height: 2.75rem;
        aspect-ratio: 1/1;
        margin-right: var(--card-padding);
      }
    }

    .main,
    .body {
      grid-area: main;
      flex: 1;
      padding: var(--card-padding);
    }

    .footer,
    .actions {
      grid-area: footer;
      height: auto;
      width: 100%;
      padding: var(--card-padding);
      border-top: 1px solid rgb(0 0 0 / 12.5%);
      background-color: inherit;
    }

    &.autolink h3>a::before {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      content: "";
    }
  }

  // container marked with class='horizontal' for horizontal oriented cards
  // stretching on the whole with with image on the left */
  &.horizontal {
    --card-width: 100%;
    --card-height: 7.2rem;

    >.card {
      grid-template: "header main" 1fr "header footer" auto / max-content auto;

      >svg:first-child,
      >img:first-child {
        width: var(--card-image-size);
        height: 100%;
      }
    }
  }

  // Cards with a defined, fixed width can be placed multiple times on one row when the with is giving enough space.
  // For these cases the card-container implements the layout allowing centering the card collection in the center of the main content.
  // Marking the card-container with class='col280' to provide multiple columns with width 280px.
  // As css variables cannot be used in the css selectors they are hard-calculated here (with the help of sass if you like)


  &.col280 {
    // N columns of 280px cards with 16px gap
    // 280*N + 16*(N-1)) = 280, 576, 872,  1168, ... in reverse with container queries
    // 4 columns maximum
    width: calc($u-card-width * 4 + $u-card-gap * 3);

    // @container main (width < #{$u-card-4col}) {
    @container main (width < #{$u-card-width * 4 + $u-card-gap * 3}) {
      width: calc($u-card-width * 3 + $u-card-gap * 2);
    }

    @container main (width < #{$u-card-width * 3 + $u-card-gap * 2}) {
      width: calc($u-card-width * 2 + $u-card-gap);
    }

    @container main (width < #{$u-card-width * 2}) {
      width: $u-card-width;
    }
  }

  &.col365 {
    // N columns of 365px cards with 10px gap
    // 280*N + 16*(N-1)) = 365, 740, 1115, 1490, ... in reverse with container queries

    --card-width: 365px;
    --card-gap: 10px;

    // 4 columns maximum
    width: calc(365px * 4 + 10px * 3);

    // @container main (width < #{$u-card-4col}) {
    @container main (width <= #{365px * 4 + 10px * 3}) {
      width: calc(365px * 3 + 10px * 2);
    }

    @container main (width < #{365px * 3 + 10px * 2}) {
      width: calc(365px * 2 + 10px);
    }

    @container main (width < #{365px * 2}) {
      width: 365px;
    }
  }
}


// simple content cards with image + text
.plaincard,
.imgcard,
.iconcard {
  position: relative;
  margin: base.$u-gutter base.$u-gutter base.$u-gutter 0;
  width: 100%;
  max-width: 100%;
  background-color: var(--card-back);
  page-break-inside: avoid;

  >h3 {
    margin-top: 0;
  }
}

// card with text only
.plaincard {
  padding: base.$u-gutter2;
  min-height: 6rem;
}

// cards with icon
.iconcard {
  padding: base.$u-gutter base.$u-gutter base.$u-gutter calc(4rem + 2 * base.$u-gutter);
  min-height: 5.4rem;

  svg {
    position: absolute;
    top: base.$u-gutter;
    left: base.$u-gutter;
    height: 4rem;
    width: 4rem;
  }
}

// picture with 4:3 ratio + text
.imgcard {
  padding: base.$u-gutter2 base.$u-gutter2 0 calc(9.6rem + base.$u-gutter2);
  min-height: 7.2rem;

  img {
    position: absolute;
    top: 0;
    left: 0;
    height: auto;
    width: 9.6rem;
    max-height: 7.2rem;
  }
}
