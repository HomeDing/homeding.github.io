<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc" />
  <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353" />
  <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
  <meta name='description' content='Create repeating events.'>
  <title>The Timer Element</title>
  <link Content-Type="text/css" href="/docstyle.css" rel="stylesheet" />
  <script src="/pages.js"></script>
</head>

<body scroll="0" style="padding:0;">
  <div class="u-header">
    <a href="/" title="Startpage"><img class="icon" src="/i/default.svg" /></a>
    <h1>HomeDing</h1>
  </div>

  <div class="u-navbar" style="margin-bottom: 0;">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z" />
    </svg>

    <a href="/index.htm" class="button">Home</a>
    <a href="/concepts/index.htm" class="button">Concepts</a>
    <a href="/elements/index.htm" class="button">Elements</a>
    <a href="/boards/index.htm" class="button">Boards</a>
    <a href="/recipes/index.htm" class="button">Recipes</a>
  </div>
  <nav class="inpage x  open"></nav>

  <main style="padding:1rem">
    <h1>The Timer Element</h1>
<div class="iconcard"><svg class="icon"><use href="/icons.svg#timer"></use></svg><p>The TimerElement creates events based on a one-time or cyclic timing pattern.</p>
</div>
<p>During the specified time period the output value will be switched on and off once. The timer can be restarted automatically.</p>
<h2>Web UI for the Timer Element</h2>
<p>There is a dedicated card for this element available that will be used for the web server config and landing pages:</p>
<p><img src="/elements/timerui.png" alt="Timer Web UI"></p>
<p>The web ui for the timer element show the pulseTime of the cycleTime using the green bar and the actual passed part of the cycleTime using the red bar.</p>
<p>The buttons allow restarting the cycle or advancing to the <code>on</code> or <code>off</code> time or stopping the timer.</p>
<p>This diagram shows the state, value and actions based on the settings:</p>
<pre><code>        events: +--&gt; &quot;on&quot;         +--&gt; &quot;off&quot;
                +--&gt; &quot;value=1&quot;    +--&gt; &quot;value=0&quot;  +--&gt; &quot;end&quot;
                |                 |               |
________________/‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\_______________

&lt;-- waitTime --&gt; &lt;-- pulseTime --&gt;
&lt;------------- cycleTime ------------------------&gt;|
</code></pre>
<p>When started and the specified wait time has passed the output value is set to one for the specified time.</p>
<p>The cycle time and the type LOOP can be specified to restart the timer automatically.</p>
<p>An action is emitted every time the output value changes and when the timer has ended.</p>
<h2>Element Configuration</h2>
<p>The following properties are available for configuration of the element.</p>
<p><object data="/element.svg?timer" type="image/svg+xml"></object></p>
<p><strong>title</strong> - Caption text for the element. Used in the boards.</p>
<p><strong>description</strong> - A line of text that gives a short description of the device used in the web UI.</p>
<p><strong>mode</strong> - The element supports 3 modes: <strong>&quot;on&quot;</strong> for always on, <strong>&quot;off&quot;</strong> for always off and <strong>&quot;timer</strong>&quot; for switching the value using the timer settings.</p>
<p><strong>restart</strong> - When set to &quot;true&quot; or &quot;1&quot; the timer restarts automatically when cycleTime is over.</p>
<p><strong>waitTime</strong> - time before &quot;on&quot; action</p>
<p><strong>pulseTime</strong> - time between &quot;on&quot; and &quot;off&quot; action.</p>
<p><strong>cycleTime</strong> - time of a complete timer cycle. When  not specified or too low the cycletime gets adjusted to waittime+pulsetime.</p>
<p><strong>onOn</strong> - These actions are dispatched when the pulse time starts.</p>
<p><strong>onOff</strong> - These actions are dispatched when the pulse time ends.</p>
<p><strong>onValue</strong> - These actions are dispatched when the pulse time starts or ends</p>
<p><strong>onEnd</strong> - These actions are dispatched when a timer ends by using the <code>stop</code> action or when a <code>once</code> timer has finished the cycle. |</p>
<h2>Control the Element</h2>
<p>The timer element can run on it's own but can also be controlled by the following incomming actions:</p>
<p><strong>start</strong> - Receiving this action starts the timer from the beginning.</p>
<p><strong>stop</strong> - Receiving this action stop the timer.</p>
<p><strong>next</strong> - Receiving this action advances the timer to on / off .</p>
<h3>Configuration Example</h3>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"timer"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"led"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"timer"</span><span class="token punctuation">,</span><br>      <span class="token property">"restart"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><br>      <span class="token property">"waittime"</span><span class="token operator">:</span> <span class="token string">"4s"</span><span class="token punctuation">,</span><br>      <span class="token property">"pulsetime"</span><span class="token operator">:</span> <span class="token string">"8s"</span><span class="token punctuation">,</span><br>      <span class="token property">"cycletime"</span><span class="token operator">:</span> <span class="token string">"20s"</span><span class="token punctuation">,</span><br>      <span class="token property">"onon"</span><span class="token operator">:</span> <span class="token string">"digitalout/led?on"</span><span class="token punctuation">,</span><br>      <span class="token property">"onoff"</span><span class="token operator">:</span> <span class="token string">"digitalout/led?off"</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<h2>State</h2>
<p>The state of the timer element includes:</p>
<p><strong>active</strong> - Is set to true when the element is active.</p>
<p><strong>mode</strong> - Current mode of the element &quot;on&quot;, &quot;off&quot; or &quot;timer&quot;.</p>
<p><strong>time</strong> - time passed since starting the cycle (in seconds).</p>
<p><strong>value</strong> - Current output value of the element.</p>
<h3>Example for State</h3>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"timer/relay"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"active"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span><br>    <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span><br>    <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span><br>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"0"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<h2>See also</h2>
<ul>
<li><a href="/elements/timeelements.htm">Time Elements</a></li>
</ul>

  </main>

  <script>
    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');

    navObj.classList.toggle('open', (window.innerWidth > 880));

    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });

    lazyLoadHTM('nav', '/toc.htm');
  </script>
  
  </body>

</html>