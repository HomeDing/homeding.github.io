<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc" />
  <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353" />
  <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
  <meta name='description' content='Examples and documentation for the HomeDing IoT Library'>
  <title>Scene Element</title>
  <link Content-Type="text/css" href="/docstyle.css" rel="stylesheet" />
  <script src="/pages.js"></script>
  <script src="/story.js" type="module"></script>
  <style>
  .gpio { 
    display:inline-block;
    padding: 0 4px;
    border-radius: 4px;
    }
  .gpio.yellow {background-color: #FF0;}
  .gpio.red {background-color: #F22; color:white}
  .gpio.black {background-color: #111; color:white}
  .gpio.blue {background-color: #22F; color:white}
  </style>
</head>

<body scroll="0" style="padding:0;">
  <div class="u-navbar" style="margin-bottom: 0;">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z" />
    </svg>

    <a href="/index.htm" class="button">Home</a>
    <a href="/concepts/index.htm" class="button">Concepts</a>
    <a href="/elements/index.htm" class="button">Elements</a>
    <a href="/boards/index.htm" class="button">Boards</a>
    <a href="/recipes/index.htm" class="button">Recipes</a>
  </div>

  <nav class="inpage open"></nav>

  <main style="padding:1rem;max-width: 800px;">
    <h1>Scene Element</h1>

    
    
      <div class="plaincard">
    
    The SceneElement is used to operate on a list of actions triggered by incoming actions. They can be send out step by step using a defined delay or by actions.
</div>
      
    <div class="iconcard"><svg class="icon"><use href="/icons.svg#scene"></use></svg><p>The SceneElement is used to operate on a list of actions triggered by incoming actions. They can be send out step by step using a defined delay or by actions.</p>
</div>
<p>In the configuration a list of <code>steps</code> is defined containing actions for other elements.</p>
<p>This list can be executed automatically using a defined <code>delay</code> and a <code>start</code> action
or can be started individually by a <code>next</code> action.</p>
<p>In normal cases when only one or few actions should be triggered multiple actions can be listed inline
in action configurations of elements.</p>
<p>The scene element allows sending multiple actions beyond this limit or when different element
need to send the same list of events but different values.</p>
<p>The scene element also can be used to configure presets of multiple element values
at a single place by using multiple scene definitions.</p>
<p>A scene element can also be controlled over the network by using a simple links like:</p>
<pre class="language-txt"><code class="language-txt">http://homeding/$board/scene/day?start<br>http://homeding/$board/scene/night?start<br>http://homeding/$board/scene/stations?next</code></pre>
<h2>Element Configuration</h2>
<p><object data="/element.svg?scene" type="image/svg+xml"></object></p>
<p>This element implements the following properties and actions:</p>
<blockquote>
<p><strong>steps[]</strong> - This is an array of actions are emitted
when the value of the scene element is set to any value.</p>
<p><strong>delay</strong> - This property can be set to enable automatic starting all steps one after one.
This property specifies the delay duration like <code>2s</code>.
When not set a <code>next</code> action is required to advance to the next step.</p>
<p><strong>start</strong> - This action is used to start at step[0] and advance automatically when a delay is configured.</p>
<p><strong>next</strong> - This action will start sending the actions of the next step.</p>
<p><strong>prev</strong> - This action will start sending the actions of the previous step</p>
</blockquote>
<p>From the base element implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>title</strong> - Caption text for the element. Used by the element specific cards on the dash boards.</p>
<p><strong>description</strong> - A line of text that gives a short description of the device used in the web UI.</p>
<p><strong>room</strong> - The location of the device.</p>
<p><strong>loglevel</strong> - This property holds the element specific log level. The default value is LOGGER_LEVEL_ERR == 1.</p>
</blockquote>
<h3>Configuration Example</h3>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"scene"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"day"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>        <span class="token string">"light/ceiling?brightness=$v"</span><span class="token punctuation">,</span><br>        <span class="token string">"light/wall?brightness=$v"</span><span class="token punctuation">,</span><br>        <span class="token string">"switch/steps?value=0"</span><br>      <span class="token punctuation">]</span><span class="token punctuation">,</span><br>      <span class="token property">"delay"</span><span class="token operator">:</span> <span class="token number">1</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br><br>    <span class="token property">"night"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>        <span class="token string">"light/ceiling?brightness=0"</span><span class="token punctuation">,</span><br>        <span class="token string">"light/wall?brightness=0"</span><span class="token punctuation">,</span><br>        <span class="token string">"switch/steps?value=1"</span><br>      <span class="token punctuation">]</span><span class="token punctuation">,</span><br>      <span class="token property">"delay"</span><span class="token operator">:</span> <span class="token number">0</span><br>    <span class="token punctuation">}</span><span class="token punctuation">,</span><br>    <span class="token property">"off"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br>        <span class="token string">"light/ceiling?brightness=0"</span><span class="token punctuation">,</span><br>        <span class="token string">"light/wall?brightness=0"</span><span class="token punctuation">,</span><br>        <span class="token string">"switch/steps?value=0"</span><br>      <span class="token punctuation">]</span><span class="token punctuation">,</span><br>      <span class="token property">"delay"</span><span class="token operator">:</span> <span class="token number">0</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<h2>State</h2>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br>  <span class="token property">"scene/night"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token property">"active"</span><span class="token operator">:</span> <span class="token string">"true"</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<h2>Tags</h2>
<h1>element</h1>


    
    <h2>Tags</h2>
    <div class="taglist"><a href="/tag/element.htm">Element</a></div>
    
  </main>

  <script>
    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');

    navObj.classList.toggle('open', (window.innerWidth > 880));

    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });

    lazyLoadHTM('nav', '/toc.htm');
  </script>
  
  </body>

</html>