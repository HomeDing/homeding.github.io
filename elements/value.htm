
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
    <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
    <title>Value Element</title>
    <meta name='description' content='Examples and documentation for the HomeDing IoT Library'>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/pages.js"></script>
    <script src="/story.js" type="module"></script>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>Value Element</h1>
      
        
          <div class="iconcard">
            <svg class="icon">
              <use href="/icons.svg#value"></use>
            </svg>
          
            The ValueElement combines receiving modifying actions for an internal state value and sending actions on changing the value. This can e.g. be used to drive a LED or a relay.

          </div>
        
        <h2>Web UI</h2>
<p>On the board page this element is presented by using a specialized widget that visualizes and enables controlling the actual value:</p>
<p><img src="/elements/valueui.png" alt="Value Widget"></p>
<p>The slider can be used to adjust the value interactively and the arrows allow single step changes.</p>
<p>The setup icon opens a dialog to change the configuration properties.</p>
<h2>Value Properties and actions</h2>
<p>The Value Element is used to implement a property or parameter as a single value independent from a specific Element. The Value Element can send actions to other Elements whenever the value changes.</p>
<p>The values itself can be modified by other Elements using several modifying actions and by the corresponding web UI.</p>
<!-- 
ToDo: A default value can be specified in the configuration but can be saved to  survive restarting the device.
  -->
<h3>Example</h3>
<p>Two Buttons should be used to increment and decrement the brightness of an attached LED.</p>
<h3>Solution</h3>
<ul>
<li>Two ButtonElements are created to capture this input from digital input lines.</li>
<li>Each button will trigger an up / down action for a ValueElement.</li>
<li>The ValueElement defines the default value and valid range for the value.</li>
<li>When the value changes the new value is sent to the PWMOutElement.</li>
</ul>
<p>Here the ValueElement can help. It allows</p>
<ul>
<li>Setting a default value used at startup</li>
<li>Get an up action to increment the value</li>
<li>Get a down action to decrement the value</li>
<li>Get a set action to set the value (e.g. to 0)</li>
<li>Can limit the value to a lower and upper limit</li>
<li>Send out an action when the value changes.</li>
</ul>
<h2>Element Configuration</h2>
<p><object data="/element.svg?value" type="image/svg+xml"></object></p>
<p>The following properties are available for configuration of the element.</p>
<blockquote>
<p><strong>min</strong> – Defines the minimum of the value.</p>
<p><strong>max</strong> – Defines the maximum of the value.</p>
<p><strong>step</strong> – The value will be incremented / decremented by the multiple of the step value
when using the up / down actions.</p>
<p><strong>value</strong> – An initial/default value can be set using the configuration.</p>
<p><strong>onValue</strong> – These actions will be emitted whenever the value has changed.</p>
<p><strong>up</strong> – the value can be incremented by the passed value. Negative values are allowed.</p>
<p><strong>down</strong> – the value can be decremented by the passed value.</p>
<p><strong>label</strong> – The label is used together with the menu element to show the current selected value.</p>
</blockquote>
<p>From the base element implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>title</strong> – Caption text for the element. Used by the element specific cards on the dash boards.</p>
<p><strong>description</strong> – A line of text that gives a short description of the device used in the web UI.</p>
<p><strong>room</strong> – The location of the device.</p>
<p><strong>loglevel</strong> – This property holds the element specific log level. The default value is LOGGER_LEVEL_ERR == 1.</p>
</blockquote>
<p>This Element supports <a href="/elements/state.htm">Persisting Current State of Elements</a> for the current values.</p>
<blockquote>
<p><strong>useState</strong> – set to true for saving the current values in the Device State.</p>
</blockquote>
<h2>Examples for actions</h2>
<p>The value element accepts actions like</p>
<ul>
<li><code>value/led?up=1</code> to increment by 1</li>
<li><code>value/led?up=10</code> to increment by maximal 10</li>
<li><code>value/led?down=1</code> to decrement by 1</li>
<li><code>value/led?up=-1</code> to decrement by 1</li>
</ul>
<h2>Element State</h2>
<p>The current value is reported as the state of a value element.</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"value/volume"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"active"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>
    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"4"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Example Configuration</h2>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"min"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">"max"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token property">"onvalue"</span><span class="token operator">:</span> <span class="token string">"radio/r?volume=$v"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>See also</h2>
<ul>
<li><a href="/elements/state.htm">Persisting Current State of Elements</a></li>
<li><a href="/elements/rotary.htm">Rotary Element</a></li>
<li><a href="/elements/menu.htm">Menu Element</a></li>
<li><a href="/recipes/leddim.htm">Dimmable LED recipe</a></li>
</ul>

        
          <h2>Tags</h2>
          <div class="taglist">
            
              <a href="/tag/element.htm">Element</a>
            
          </div>
        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>