
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio Element</title>
    <script src="/pages.js"></script>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/story.js" type="module"></script>
    <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
    <meta name='description' content='Audio processing on ESP32'>
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>Audio Element</h1>
      
        
          <div class="iconcard">
            <svg class="icon">
              <use href="/icons.svg#audio"></use>
            </svg>
          
            The Audio Element enables audio streaming and audio processing in a background task. The Audio Element is part of the WebRadio Example.

          </div>
        
        <p>Based on this Element you can implement internet audio streaming devices as shown in the
<a href="/examples/webradio.htm">Webradio Example</a>.</p>
<p>It requires a ESP32 or ESP32-S3 processor that supports multiple tasks
and PSRAM for buffering audio data.</p>
<p>The AudioElement uses the ESP32 specific audio library from
<a href="https://github.com/schreibfaul1/ESP32-audioI2S">https://github.com/schreibfaul1/ESP32-audioI2S</a> that must be installed separately.</p>
<p>The AudioElement just adds a thin wrapper to configure and control the library. The Audio processing itself is started on another ESP32 FreeRTOS task and runs in the background.</p>
<p>There can only be one AudioElement created per device.</p>
<h2>Element Configuration</h2>
<p>The properties correspond to the api given by the audio library.
However not all features are yet support by configuration.</p>
<blockquote>
<p><strong>url</strong> – set new streaming url</p>
<p><strong>volume</strong> – set volume</p>
<p><strong>balance</strong> – set right-left balance</p>
<p><strong>low</strong> – adjust low-tone level in the range -20 … +6. Default level is 0.</p>
<p><strong>mid</strong> – adjust mid-tone level in the range -20 … +6. Default level is 0.</p>
<p><strong>high</strong> – adjust high-tone level in the range -20 … +6. Default level is 0.</p>
<p><strong>mono</strong> – force mono mode as output. Default is 0 (stereo).</p>
<p><strong>ontitle</strong> – these actions are send when a title is included in the streaming.</p>
<p><strong>onstation</strong> – these actions are send when a station name is included in the streaming.</p>
<p><strong>bclk</strong>* – set the pin used for the i2s clock signal</p>
<p><strong>lrc</strong>* – set the pin used for the i2s LR signal</p>
<p><strong>dout</strong>* – set the pin used for the i2s DOUT signal</p>
</blockquote>
<p>* This parameter is mandatory and must be set.
The element also supports RDS signals for the chips that decode these signals.</p>
<p>From the base element implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>title</strong> – Caption text for the element. Used by the element specific cards on the dash boards.</p>
<p><strong>description</strong> – A line of text that gives a short description of the device used in the web UI.</p>
<p><strong>room</strong> – The location of the device.</p>
<p><strong>loglevel</strong> – This property holds the element specific log level. The default value is LOGGER_LEVEL_ERR == 1.</p>
<p><strong>startup</strong> – This property can be used to start the element using a different initialization phase.
Possible values are “sys”, “net”, “time”. See <a href="/dev/startup.htm">The Startup sequence</a>.</p>
</blockquote>
<h3>Configuration Example</h3>
<p>This example shows how to configure this element:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"audio"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"0"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"audio processing"</span><span class="token punctuation">,</span>
      <span class="token property">"bclk"</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>
      <span class="token property">"lrc"</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
      <span class="token property">"dout"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"audio/0?url=https://dispatcher.rndfnk.com/hr/hr3/live/mp3/high"</span><span class="token punctuation">,</span>
      <span class="token property">"ontitle"</span><span class="token operator">:</span> <span class="token string">"displaytext/info?value=$v"</span><span class="token punctuation">,</span>
      <span class="token property">"onstation"</span><span class="token operator">:</span> <span class="token string">"displaytext/station?value=$v"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>See also</h2>
<ul>
<li><a href="/elements/index.htm">Elements</a></li>
<li><a href="/elements/audio/radio.htm">Radio Element</a></li>
</ul>

        
          <h2>Tags</h2>
          <div class="taglist"><a href="/tag/element.htm">Element</a></div>
        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>