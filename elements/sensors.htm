<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc" />
  <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353" />
  <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
  <meta name='description' content='Examples and documentation for the HomeDing IoT Library'>

  <title>Sensor Element Implementation</title>
  <link Content-Type="text/css" href="/docstyle.css" rel="stylesheet" />
  <script src="/pages.js"></script>
  <style>
  .gpio { 
    display:inline-block;
    padding: 0 4px;
    border-radius: 4px;
    }

  .gpio.yellow {background-color: #FF0;}
  .gpio.red {background-color: #F22; color:white}
  .gpio.black {background-color: #111; color:white}
  .gpio.blue {background-color: #22F; color:white}
  </style>
</head>

<body scroll="0" style="padding:0;">
  <div class="u-navbar" style="margin-bottom: 0;">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z" />
    </svg>

    <a href="/index.htm" class="button">Home</a>
    <a href="/concepts/index.htm" class="button">Concepts</a>
    <a href="/elements/index.htm" class="button">Elements</a>
    <a href="/boards/index.htm" class="button">Boards</a>
    <a href="/recipes/index.htm" class="button">Recipes</a>
  </div>

  <nav class="inpage open"></nav>

  <main style="padding:1rem">
    <h1>Sensor Element Implementation</h1>

    
      
    <p>Many sensor elements offer similar functionality and configuration
and therefore are based on the abstract implementation of the &quot;SensorElement&quot; class.</p>
<p>These sensor elements enable reading values from a sensor chip on a specific time interval. When new values could be retrieved these are emitted to other elements using actions.</p>
<p>On the board of the device in the Web UI the actual sensor values are shown as well.</p>
<p>The HomeDing library supports a collection of common sensor chips:</p>
<ul>
<li><a href="/elements/ds18b20.htm">DS18B20 Element</a> supports the DS18B20 aka. Dallas Temperature sensor.</li>
<li><a href="/elements/dht.htm">DHT Element</a> supports the DHT11, DHT22 and AM2302 temperature+humidity sensors.</li>
<li><a href="/elements/sht20.htm">SHT20 Element</a> supports the SHT2x high precision temperature and humidity sensors.</li>
<li><a href="/elements/bmp280.htm">BMP280 Element</a> supports the BMP280 temperature and absolute barometric pressure sensor.</li>
<li><a href="/elements/bme680.htm">BMP680 Element</a> supports the BME680 temperature, humidity, pressure and gas resistance sensor.</li>
<li><a href="/elements/pms.htm">PMS Element</a> supports the PMS5003 sensor by plantdata to count micro particles in the air.</li>
<li><a href="/elements/ina219.htm">INA219 Element</a> using the INA219 power consumption chip.</li>
<li><a href="/elements/ina226.htm">INA226 Element</a> using the INA219 power consumption chip.</li>
</ul>
<h2>Common Sensor Implementation</h2>
<p>To simplify the implementation of sensors like these there is a special Element with some common functionality available.
It is used as a base class for Elements that implement the data exchange with a special sensor chip.</p>
<p>Using a sensor often requires to get data probes on a regular basis e.g. every minute or every 5 minutes. Waiting for the next timeslot to take a probe is implemented by defining the <code>readtime</code> property on any element configuration.</p>
<p>Only the 2 functions <code>GetProbe()</code> and <code>SendValues()</code> need to be implemented instead of the <code>loop()</code> function.</p>
<h2>Element Configuration</h2>
<p>From the base <a href="/elements/sensors.htm">Sensor Element</a> implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>readTime</strong> - Time between 2 probes being fetched from the sensor. Default value is 1m.</p>
<p><strong>resendTime</strong> - The current values of the probe are resent after this specified time even when not changing.</p>
<p><strong>warmupTime</strong> - This time is waited after powering the sensor on the first start or after a reset before the first data is fetched.
The default time is set to 3 seconds.</p>
<p><strong>restart</strong> - This property can be set to true to enable an automated restart when the sensor was not responding data.</p>
</blockquote>
<p>From the base element implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>title</strong> - Caption text for the element. Used by the element specific cards on the dash boards.</p>
<p><strong>description</strong> - A line of text that gives a short description of the device used in the web UI.</p>
<p><strong>room</strong> - The location of the device.</p>
<p><strong>loglevel</strong> - This property holds the element specific log level. The default value is LOGGER_LEVEL_ERR == 1.</p>
</blockquote>
<h2>Get Sensor Data</h2>
<blockquote>
<p>bool GetProbe(&amp;values);</p>
</blockquote>
<p>When deriving from the SensorElement class the <code>GetProbe(&amp;values)</code> function will be called when time has come.</p>
<p>This function will be called similar to the <code>loop()</code> function as long as it returns <code>false</code> to indicate that retrieving the data has not been completed. This may be required when reading a sensor includes waiting for the sensor being available or data being transmitted to the board.</p>
<p>When returning <code>true</code> the data retrieval is assumed to be completed. The data has to be returned by using the passed string parameter.</p>
<p>When returning <code>true</code> and an empty string back it is assumed that the sensor cannot be reached and this will end the current data retrieval.</p>
<h2>Sending Actions With Sensor Data.</h2>
<blockquote>
<p>void SendValues(&amp;values);</p>
</blockquote>
<p>The <code>SendValues()</code> function will be called with the latest retrieved data and when actions are defined the sensor specific element will send them out.</p>
<p>The state of the element also needs to be updated.</p>
<h2>Detect non changing values</h2>
<p>The data returned by the <code>GetProbe()</code> function will be compared against the last retrieved values. If there is no difference no action will be sent immediately.</p>
<h2>Resend values after some time</h2>
<p>When data from the sensor has not changed it may be necessary to trigger the actions from time to tome e.g. to inform remote elements about the actual values.</p>
<p>By specifying the <code>resendtime</code> property the resent values are sent even when not changed.</p>
<h2>Tags</h2>
<p>#implementation</p>


    
    <h2>Tags</h2>
    <div class="taglist"><a href="/tag/element.htm">Element</a></div>
    
  </main>

  <script>
    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');

    navObj.classList.toggle('open', (window.innerWidth > 880));

    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });

    lazyLoadHTM('nav', '/toc.htm');
  </script>
  
  </body>

</html>