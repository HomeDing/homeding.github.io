
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Persisting Current State of Elements</title>
    <script src="/pages.js"></script>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/story.js" type="module"></script>
    <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
    <meta name='description' content='Examples and documentation for the HomeDing IoT Library'>
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>Persisting Current State of Elements</h1>
      
        
            <div class="plaincard">
            
            Enable devices to restart with the values and the current state after a reboot or deep sleep.

          </div>
        
        <p>Usually elements start with the settings given by the configuration files.
But in some situations and with some elements the last used working mode or value should be used
after a planned (or unplanned) restart of the device.</p>
<p>Example: When a light device like a bulb is starting up it can use the color and brightness
values that where used before the restart. These values will be used to overwrite the values
from the configuration.</p>
<p>Typically Elements know whether they should support this feature like a power switching device.
Other Elements like sensors have no obvious use case for this.</p>
<p>As the value element is also supporting saving the current value as a state it can be used to
even save a last known sensor value.</p>
<p>All Elements can save any values by calling the function <code>saveState(key, value)</code> available in the Element base class.
To enable saving the current state the property <code>usestate</code> must be set to <code>true</code>.</p>
<p>This information will be used to create an action <code>type/id?{key}={value}</code> on the next element
restart before starting the element. This action will then overwrite the configuration or value
from the element configuration.</p>
<p>To avoid too much and too frequent storing these key+values the the state mechanism
must be configured on the global and the element level.</p>
<h2>Elements persisting their state</h2>
<p>Elements have to implement saving their current values using the <code>saveState(key, value)</code>
function. To enable the values from an element get part of the device state the property
<code>useState</code> must be set to <code>true</code>.</p>
<pre class="language-JSON"><code class="language-JSON">{
  "value": {
    "sw": {
      "title": "Stateful Value",
      "min": "0",
      "max": "100",
      "useState": "true"
    }
  }
}</code></pre>
<p>Elements may persist a single value or even multiple values in the state.</p>
<p>Elements that change their state very frequently should not persist their values
as this will result in much IO on the filesystem that may burn down Flash memory.</p>
<h2>Persisting the state of the device</h2>
<p>The values from the elements configured with <code>useState</code> flag to true will be collected
inside the <code>DeviceState</code> storage.</p>
<p>The global configuration that enables saving it to a permanent media the <code>StateElement</code> can be
configured:</p>
<blockquote>
<p><strong>savedelay</strong> – This value must be given with a duration &gt; 0. After this duration the state
will be saved. This should be a value that is high enough to save the current state not too
often.</p>
<p><strong>clear</strong> – This action will clear out any state values from elements.</p>
</blockquote>
<p>In the Element the configuration of the persist property</p>
<p>To avoid too much and too frequent storing these key+values the the state mechanism
must be configured on the global and the element level.</p>
<pre class="language-JSON"><code class="language-JSON">{
  "state": {
    "0": { "savedelay": "8s"}
  }
}</code></pre>
<p>The values will be persisted using the local file system in a hidden file.</p>
<h2>Elements with State</h2>
<p>There are multiple Elements that support saving and loading state:</p>
<ul>
<li><a href="/elements/value.htm">Value Element</a></li>
<li><a href="/elements/switch.htm">Switch Element</a></li>
</ul>
<!-- 
[](https://www.dweet.io/play/)


https://www.balena.io/

https://temboo.com/
https://temboo.com/arduino
https://temboo.com/arduino/others/update-google-spreadsheet


https://alternativeto.net/software/dweet-io/?license=free -->
<h2>See also</h2>
<ul>
<li>RTC Memory functions: <a href="https://arduino-esp8266.readthedocs.io/en/latest/libraries.html#esp-specific-apis">https://arduino-esp8266.readthedocs.io/en/latest/libraries.html#esp-specific-apis</a></li>
</ul>

        
          <h2>Tags</h2>
          <div class="taglist">
            
              <a href="/tag/element.htm">Element</a>
            
          </div>
        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>