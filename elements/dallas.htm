
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
    <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
    <title>Dallas Element</title>
    <meta name='description' content='Support of the Dallas / DS18B20 based sensors.'>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/pages.js"></script>
    <script src="/story.js" type="module"></script>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>Dallas Element</h1>
      
        
          <div class="iconcard">
            <svg class="icon">
              <use href="/icons.svg#dallas"></use>
            </svg>
          
            The DallasElement allows retrieving temperature values from DS18B20 aka. Dallas Temperature sensors and creates actions when new values are available.

          </div>
        
        <p><img src="/elements/dallaspins.jpg" alt="Dallas pins"></p>
<p>The DS18B20 is a temperature sensor most often in a simple to-92 housing like a transistor.
Other forms and types are also available including those that can be in contact with water
or other liquids without getting damaged.</p>
<p>The data transmission is using 1 wire only (the OneWire protocol).
In addition to the sensor a 4.7k resistor is required to pull up the data line.</p>
<p>There have been older versions of this chip like DS1820 and DS18S20 and less accurate sensors like the DS18B20 so today the DS18B20 version is the most current one so only this type is supported by the element implementation.</p>
<p>See information in the links to application notes below.</p>
<h2>Web UI for the DS18B20 Element</h2>
<p>There is a dedicated card for this element available that shows the actual temperature.</p>
<p><img src="/elements/dallasui.png" alt="Dallas Sensor UI"></p>
<h2>Using the Dallas Element</h2>
<p>The Dallas Element is not part of the core set of elements because the low level communication to the chips the <code>OneWire</code> library is used and needs to be installed using the Arduino library manager.</p>
<p>The <code>OneWire</code>and the <code>DallasTemperature</code> library is required by this element
and installed as dependency when installing the library.</p>
<p>The <code>HOMEDING_INCLUDE_DALLAS</code> must be defined in the main sketch to compile and register the element.</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Use some more Elements that need additional libraries</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOMEDING_INCLUDE_DALLAS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;HomeDing.h></span></span></code></pre>
<h2>Connecting a Sensor</h2>
<p>The Sensor can be driven by using the GND and 3.3 VCC from the processor board and only one data line to a free GPIO port.</p>
<p>In addition to the sensor a 4.7k resistor is required to pull up the data line.</p>
<table>
<thead>
<tr>
<th>ESP8266</th>
<th>ESP32</th>
<th style="text-align:left">DS18B22</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GND</td>
<td>GND</td>
<td style="text-align:left">1 GND</td>
<td>Ground</td>
</tr>
<tr>
<td>GPIO2(D4)</td>
<td>IO32</td>
<td style="text-align:left">2 Data</td>
<td>Data  with 4.7 K Resistor to VCC</td>
</tr>
<tr>
<td>3.3v</td>
<td>3.3v</td>
<td style="text-align:left">3 VCC</td>
<td>Power Supply</td>
</tr>
</tbody>
</table>
<h2>Element Configuration</h2>
<p><object data="/element.svg?dallas" type="image/svg+xml"></object></p>
<p>The following properties are available for configuration of the element:</p>
<blockquote>
<p><strong>pin</strong>* - Specifies the hardware number of the pin that is used to connect the Dallas sensor for data.</p>
<p><strong>onTemperature</strong> - These actions are emitted by the element when the temperature gets a new value.
The action will not be sent when reading ne sensor values that stay the same.</p>
</blockquote>
<p>From the base <a href="/elements/sensors.htm">Sensor Element</a> implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>readTime</strong> – Time between 2 probes being fetched from the sensor. Default value is 1m.</p>
<p><strong>resendTime</strong> – The current values of the probe are resent after this specified time even when not changing.</p>
<p><strong>warmupTime</strong> – This time is waited after powering the sensor on the first start or after a reset before the first data is fetched.
The default time is set to 3 seconds.</p>
<p><strong>restart</strong> – This property can be set to true to enable an automated restart when the sensor was not responding data.</p>
</blockquote>
<p>From the base element implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>title</strong> – Caption text for the element. Used by the element specific cards on the dash boards.</p>
<p><strong>description</strong> – A line of text that gives a short description of the device used in the web UI.</p>
<p><strong>room</strong> – The location of the device.</p>
<p><strong>loglevel</strong> – This property holds the element specific log level. The default value is LOGGER_LEVEL_ERR == 1.</p>
</blockquote>
<p>* This parameter must be specified.</p>
<h3>Configuration Example</h3>
<p>This example shows how to configure this element:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"dallas"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"on"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"pin"</span><span class="token operator">:</span> <span class="token string">"D4"</span><span class="token punctuation">,</span>
      <span class="token property">"readtime"</span><span class="token operator">:</span> <span class="token string">"10s"</span><span class="token punctuation">,</span>
      <span class="token property">"resendtime"</span><span class="token operator">:</span> <span class="token string">"60s"</span><span class="token punctuation">,</span>
      <span class="token property">"ontemperature"</span><span class="token operator">:</span> <span class="token string">"displaytext/temp?value=$v"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Element State</h2>
<p>The following properties are available with the current values at runtime</p>
<p><strong>active</strong> - Is set to true when the Element is active.</p>
<p><strong>temperature</strong> - The last read temperature value from the sensor.</p>
<h3>Example State</h3>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"dallas/on"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"active"</span><span class="token operator">:</span><span class="token string">"true"</span><span class="token punctuation">,</span>
    <span class="token property">"temperature"</span><span class="token operator">:</span><span class="token string">"27.30"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>See also</h2>
<ul>
<li>OneWire library: <a href="https://github.com/PaulStoffregen/OneWire">https://github.com/PaulStoffregen/OneWire</a></li>
<li>… and doku: <a href="https://www.pjrc.com/teensy/td_libs_OneWire.html">https://www.pjrc.com/teensy/td_libs_OneWire.html</a></li>
<li>DataSheet: <a href="https://datasheets.maximintegrated.com/en/ds/DS18B20.pdf">https://datasheets.maximintegrated.com/en/ds/DS18B20.pdf</a></li>
<li><a href="https://webnist.de/ds18b20-temperatursensor-am-esp8266-mit-2-aa-batterien-verwenden/">https://webnist.de/ds18b20-temperatursensor-am-esp8266-mit-2-aa-batterien-verwenden/</a></li>
</ul>
<p>Notes from manufacturer:</p>
<ul>
<li><a href="https://www.maximintegrated.com/en/design/technical-documents/app-notes/4/4377.html">https://www.maximintegrated.com/en/design/technical-documents/app-notes/4/4377.html</a></li>
<li><a href="https://www.maximintegrated.com/en/design/technical-documents/app-notes/1/162.html">https://www.maximintegrated.com/en/design/technical-documents/app-notes/1/162.html</a></li>
</ul>

        
          <h2>Tags</h2>
          <div class="taglist">
            
              <a href="/tag/element.htm">Element</a>
            
              <a href="/tag/sensor.htm">Sensor</a>
            
          </div>
        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>