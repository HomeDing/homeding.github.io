
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
    <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
    <title>Digital Signal Element</title>
    <meta name='description' content='Support digital input signals to create actions.'>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/pages.js"></script>
    <script src="/story.js" type="module"></script>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>Digital Signal Element</h1>
      
        
          <div class="iconcard">
            <svg class="icon">
              <use href="/icons.svg#digitalsignal"></use>
            </svg>
          
            The DigitalSignalElement is used to handle digital input with short time level changes that might be missed when using the [DigitalInput Element](/elements/digitalin.md). On a changing input a pulse value is created with a defined duration.

          </div>
        
        <p>When a digital input signals like spikes are created on a GPIO input they may not last long enough to be detected by reading the actual level in the loop function.</p>
<p>To avoid missing these input signals interrupts are used that are triggered by the GPIO hardware when the signal level changes. Inside the interrupt routine itself
no action can be created so every detected digital signal change will incrementing an internal counter that is then analyzed in the loop function.</p>
<p>The output signal is generated with a given minimal duration and stays high as long as the input changes.</p>
<h2>Element Configuration</h2>
<p><object data="/element.svg?digitalsignal" type="image/svg+xml"></object></p>
<p>The following properties are available for configuration of the element:</p>
<blockquote>
<p><strong>pin</strong>* - the GPIO pin used for input.</p>
<p><strong>pullup</strong> - When defining with true the internal pullup resistor for the input pin will be activated.</p>
<p><strong>duration</strong> - the duration of the generated output pulse with a value of 1</p>
<p><strong>onHigh</strong> - These actions are emitted when the logical level is switched to <code>1</code>.</p>
<p><strong>onLow</strong> - These actions are emitted when the logical level is switched to <code>0</code>.</p>
<p><strong>onValue</strong> - These actions are emitted when the logical level is switched.</p>
</blockquote>
<p>From the base element implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>title</strong> – Caption text for the element. Used by the element specific cards on the dash boards.</p>
<p><strong>description</strong> – A line of text that gives a short description of the device used in the web UI.</p>
<p><strong>room</strong> – The location of the device.</p>
<p><strong>loglevel</strong> – This property holds the element specific log level. The default value is LOGGER_LEVEL_ERR == 1.</p>
</blockquote>
<p>* This parameter must be specified.</p>
<h3>Configuration Example</h3>
<p>This example shows how to configure this element:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"digitalsignal"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"d5"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Listen for level changes on pin D5"</span><span class="token punctuation">,</span>
      <span class="token property">"pin"</span><span class="token operator">:</span> <span class="token string">"D5"</span><span class="token punctuation">,</span>
      <span class="token property">"pullup"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>
      <span class="token property">"onvalue"</span><span class="token operator">:</span> <span class="token string">"console/log?value=D5:$v"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>State</h2>
<p>The state of the DigitalSignal element available at runtime includes the current values:</p>
<p><strong>active</strong> - Is set to true when the Element is active.</p>
<p><strong>value</strong> - The current output value from the generated pulse.</p>
<h3>Example State</h3>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"digitalsignal/d5"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"active"</span><span class="token operator">:</span><span class="token string">"true"</span><span class="token punctuation">,</span>
    <span class="token property">"value"</span><span class="token operator">:</span><span class="token string">"0"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre>
<h2>See also</h2>
<ul>
<li><a href="/elements/digitalin.htm">DigitalInput Element</a></li>
</ul>

        
          <h2>Tags</h2>
          <div class="taglist">
            
              <a href="/tag/element.htm">Element</a>
            
              <a href="/tag/input.htm">Input</a>
            
          </div>
        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>