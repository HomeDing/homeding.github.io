
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Touch Element</title>
    <script src="/pages.js"></script>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/story.js" type="module"></script>
    <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
    <meta name='description' content='Examples and documentation for the HomeDing IoT Library'>
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>Touch Element</h1>
      
        
            <div class="plaincard">
            
            The TouchElement enables creating Actions by using touch input feature of the ESP32 than detects changes in the capacity e.g. when a finger is nearby. 

          </div>
        
        <p>This is a hardware supported detection available on some GPIO without further hardware requirements.
This allows really cheap input implementations using a 1cm² pad under a isolation foil.</p>
<p>The GPIO contact must not be touched directly.</p>
<p>The touch functionality is not available on ESP8266 processor so this element will not be part of a ESP8266 firmware.</p>
<p>When using an ESP8266 or other processors there are sensor boards using special chips or
transistors to create a binary signal from a touch gesture. For these solutions a simple
<a href="/elements/digitalin.htm">DigitalInput Element</a> can be used as input element.</p>
<p>There are also touch sensors implementations available that use 2 pins to probe for the capacity
resistance using a ADC. But there is only one ADC input in the ESP8266 processors available.</p>
<h2>Connecting a Touch Sensor</h2>
<p>A touch sensor is built by a simple electrically conductive area.
This allows detecting a finger or a equivalent object nearby as this changes the capacity resistance.
It is actually not required to create a electric contact with the finger and is recommended to add a isolating on to of the area.</p>
<p>The ESP32 processors supports a capacitive touch detection on most GPIOs in the chip
that can be used to replace momentary buttons by simple pads. The value generated by the touch input is typically varying between 40 and 80 while
lower numbers are created when the capacity is higher caused by the finger nearby.
A reference value can be set to create the binary value that is HIGH(1) when touched and LOW(0) otherwise.</p>
<h2>Element Configuration</h2>
<p><object data="/element.svg?touch" type="image/svg+xml"></object></p>
<p><strong>pin</strong>* – the GPIO pin used for input.</p>
<p><strong>reference</strong> – the reference value that is used to compare touch vs no-touch capacity values. The default setting is 65.</p>
<p><strong>onHigh</strong> – These actions are emitted when the logical level is switched to <code>1</code>.</p>
<p><strong>onLow</strong> – These actions are emitted when the logical level is switched to <code>0</code>.</p>
<p><strong>onValue</strong> – These actions are emitted when the logical level is switched.</p>
<p>From the base element implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>title</strong> – Caption text for the element. Used by the element specific cards on the dash boards.</p>
<p><strong>description</strong> – A line of text that gives a short description of the device used in the web UI.</p>
<p><strong>room</strong> – The location of the device.</p>
<p><strong>loglevel</strong> – This property holds the element specific log level. The default value is LOGGER_LEVEL_ERR == 1.</p>
<p><strong>startup</strong> – This property can be used to start the element using a different initialization phase.
Possible values are “sys”, “net”, “time”. See <a href="/dev/startup.htm">The Startup sequence</a>.</p>
</blockquote>
<p>* This parameter must be specified.</p>
<h3>Configuration Example</h3>
<p>This example shows how to configure this element:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"touch"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"4"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"touch"</span><span class="token punctuation">,</span>
      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"touch sensor"</span><span class="token punctuation">,</span>
      <span class="token property">"pin"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>
      <span class="token property">"onvalue"</span><span class="token operator">:</span> <span class="token string">"digitalout/led?value=$v"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"digitalout"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"led"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"pin"</span><span class="token operator">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span>
      <span class="token property">"invert"</span><span class="token operator">:</span> <span class="token string">"1"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre>
<h2>State</h2>
<p>The state of the TouchElement Element available at runtime includes the current values:</p>
<p><strong>active</strong> - Is set to true when the Element is active.</p>
<p><strong>value</strong> - The current output value from the generated pulse.</p>
<h3>Example State</h3>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"touch/4"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"active"</span><span class="token operator">:</span><span class="token string">"true"</span><span class="token punctuation">,</span>
    <span class="token property">"value"</span><span class="token operator">:</span><span class="token string">"0"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre>
<h2>See also</h2>
<ul>
<li><a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/touch_pad.html">https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/touch_pad.html</a></li>
<li><a href="https://randomnerdtutorials.com/esp32-touch-pins-arduino-ide/">https://randomnerdtutorials.com/esp32-touch-pins-arduino-ide/</a></li>
<li><a href="/elements/digitalin.htm">DigitalInput Element</a></li>
<li><a href="/elements/display/touch.htm">DisplayTouch Element</a> for Display with touch detection.</li>
</ul>

        
          <h2>Tags</h2>
          <div class="taglist">
            
              <a href="/tag/element.htm">Element</a>
            
              <a href="/tag/input.htm">Input</a>
            
          </div>
        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>