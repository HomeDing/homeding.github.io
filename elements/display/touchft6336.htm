
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Display TouchFT6336U Element</title>
  <script src="/pages.js"></script>
  <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
  <script src="/story.js" type="module"></script>
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <meta name='description' content='Examples and documentation for the HomeDing IoT Library'>
  <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
  <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
</head>

<body class="sitelayout" style="--content-width:800px">
  <div class="navbar">
    <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
    </svg>
    <a href="/index.htm" class="button">Home</a>
    <a href="/elements/index.htm" class="button">Elements</a>
    <a href="/boards/index.htm" class="button">Boards</a>
    <a href="/recipes/index.htm" class="button">Recipes</a>
  </div>
  
  <nav class="menu"></nav>

  <main>
    <h1>Display TouchFT6336U Element</h1>

    

    <p>The FT6336U from FocalTech is a Self-Capacitive Touch Panel Controller and is part of the FT6x36 controller family.</p>
<p>These controllers have an internal processor
and firmware that actively scans the panel, detects the touch events and calculates coordinates and gestures.</p>
<p>The FT6336U variant is prepared to read up to 2 touch points and can detect some simple gestures.</p>
<h2>Driver Implementation</h2>
<p>The processor on the board can read the event data from the FT6x36 chip using the i2c bus using a 8-bit register addressing mode.</p>
<p>This interface is directly supporting reading the coordinates with the resolution of the underlying display when configured correctly by the vendor.</p>
<p>The implementation can be found directly in the Element reading the 5 relevant registers with
the coordinates for the first touch point. This is done directly without using one of the
available Arduino libraries.</p>
<h2>Element Configuration</h2>
<!-- <object data="/element.svg?touchft6336" type="image/svg+xml"></object> -->
<p>There is no need con figure the i2c address as there is a fixed address used for these drivers.</p>
<p>The width and height is already known to the display touch controller through the configuration.</p>
<p>The following properties are available for configuration of the element:</p>
<blockquote>
<p><strong>rotation</strong> â€“ Rotation of the display in use using 0, 90, 180 or 270 degree.</p>
</blockquote>
<h2>See also</h2>
<ul>
<li><a href="/elements/display/touch.htm">Display Touch Elements</a></li>
<li><a href="/dev/i2c.htm">i2c bus</a></li>
<li><a href="/boards/esp32s3/sc01-plus.htm">ESP32S3 SC01 Plus Panel</a></li>
</ul>


      
        <h2>Tags</h2>
        <div class="taglist"><a href="/tag/element.htm">Element</a><a href="/tag/display.htm">Display</a><a href="/tag/wip.htm">Wip</a></div>
      
  </main>

  <script>
    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');
    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });
    lazyLoadHTM('nav', '/toc.htm');
  </script>

  <script type="module" async>
    import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
    document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
  </script>

</body>
</html>