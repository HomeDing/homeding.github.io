
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Display LCD Element</title>
    <script src="/pages.js"></script>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/story.js" type="module"></script>
    <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
    <meta name='description' content='Using LCD displays with a HD44780 controller chip.'>
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>Display LCD Element</h1>
      
        
          <div class="iconcard">
            <svg class="icon">
              <use href="/icons.svg#displaylcd"></use>
            </svg>
          
            The DisplayLCD Element implements the display using Monochrome LCDs based on HD44780 chips. The display is connected by using the PCF8574 I2C chip to control the direct input lines of the display.

          </div>
        
        <p>In the Arduino Environment the LiquidCrystal library exits for a long time and supports HD44780 compatible LCDs with up to 4 lines of 20 characters. Displays ae available with</p>
<ul>
<li>2 lines of 8 characters</li>
<li>2 lines of 16 characters (most common and default)</li>
<li>4 lines of 20 characters</li>
</ul>
<h2>Connecting</h2>
<p>Connecting this display type to Arduino was often made using many IO lines by driving the 4-bit interface mode directly.</p>
<p>For ESP8266 and the limited number of GPIO ports a I2C adapter solution is more adequate. The most frequent found of such an solution ist the PCF8574 remote 8-bit IO adapter chip that converts between the I2C bus and up to 8 digital IO lines.</p>
<table>
<thead>
<tr>
<th>Signal</th>
<th>ESP8266</th>
<th>ESP32</th>
<th>PCF8574 I2C Adapter</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="gpio red">VCC</span></td>
<td>VCC</td>
<td>VCC</td>
<td>+5V, VCC from USB</td>
</tr>
<tr>
<td><span class="gpio black">GND</span></td>
<td>GND</td>
<td>GND</td>
<td>Common Ground</td>
</tr>
<tr>
<td><span class="gpio blue">SDA</span></td>
<td>GPIO4(D2)</td>
<td>IO21</td>
<td>I2C Data Signal</td>
</tr>
<tr>
<td><span class="gpio yellow">SCL</span></td>
<td>GPIO5(D1)</td>
<td>IO22</td>
<td>I2C Clock Signal</td>
</tr>
</tbody>
</table>
<p>See also <a href="/dev/i2c.htm">Using the I2C bus</a></p>
<p>See <a href="http://mathertel.de/Arduino/LiquidCrystal_PCF8574.aspx">http://mathertel.de/Arduino/LiquidCrystal_PCF8574.aspx</a></p>
<p>The library used to drive these displays is “LiquidCrystal_PCF8574”.</p>
<h2>Web UI for the DisplayLCD Element</h2>
<p>There is a dedicated card for this element available that will be used for the web server config and landing pages:</p>
<p><img src="/elements/display/lcdui.png" alt="LCD Web UI"></p>
<p>This card shows the current output that can also be seen on the local attached display. It is updated every time the status of the device is polled by the page.</p>
<h2>Element Configuration</h2>
<p><object data="/element.svg?lcd" type="image/svg+xml"></object></p>
<p>The following properties are available for configuration of the element:</p>
<p><strong>address</strong> the address of the display on the I2C bus. Defaults to 0x3C.</p>
<p><strong>height</strong> the number of lines the display supports.</p>
<p>The initialization of the I2C bus uses the SDA and SCL pins defined in the device configuration.</p>
<p>To show some output on the display use the <a href="/elements/display/text.htm">DisplayText Element</a>.</p>
<h2>Configuration</h2>
<p>The DisplayLCD Element can be used to configure the LCDDisplayAdapter.</p>
<p>This should be done in the <code>env.json</code> file:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"device"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"0"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"lcddevice"</span><span class="token punctuation">,</span>
      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"IoT Dev-Device with LCD"</span><span class="token punctuation">,</span>
      <span class="token property">"led"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token property">"button"</span><span class="token operator">:</span> <span class="token string">"D5"</span><span class="token punctuation">,</span>
      <span class="token property">"reboottime"</span><span class="token operator">:</span> <span class="token string">"24h"</span><span class="token punctuation">,</span>
      <span class="token property">"safemode"</span><span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">,</span>
      <span class="token property">"i2c-scl"</span><span class="token operator">:</span> <span class="token string">"D1"</span><span class="token punctuation">,</span>
      <span class="token property">"i2c-sda"</span><span class="token operator">:</span> <span class="token string">"D2"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token property">"displaylcd"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"0"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"LCD"</span><span class="token punctuation">,</span>
      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"0x27"</span><span class="token punctuation">,</span>
      <span class="token property">"lines"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token property">"columns"</span> <span class="token operator">:</span> <span class="token number">16</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Special characters</h2>
<p>The HD44780 displays do have a special character set that is explained in the datasheet. These characters e.g. can be used in the
postfix text using the 16-bit UTC notation like <code>&quot;postfix&quot;: &quot;\u00dfC&quot;</code>.</p>
<p>However the WebUI will use the standard unicode codes as expected in the browser so the special character may look different in the Web UI.</p>
<p><a href="https://www.martyncurrey.com/arduino-with-hd44780-based-lcds/">text</a></p>
<h2>See also</h2>
<ul>
<li><a href="/dev/i2c.htm">Using the I2C bus</a></li>
<li><a href="/elements/display/text.htm">DisplayText Element</a></li>
<li><a href="/elements/display/dot.htm">Display Dot</a></li>
</ul>

        
          <h2>Tags</h2>
          <div class="taglist">
            
              <a href="/tag/element.htm">Element</a>
            
              <a href="/tag/element.htm">Element</a>
            
              <a href="/tag/display.htm">Display</a>
            
          </div>
        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>