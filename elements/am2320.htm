
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AM2320 Element</title>
    <script src="/pages.js"></script>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/story.js" type="module"></script>
    <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
    <meta name='description' content='Support of the AM2320 air temperature and humidity sensor chips in i2c mode.'>
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>AM2320 Element</h1>
      
        
          <div class="iconcard">
            <svg class="icon">
              <use href="/icons.svg#dht"></use>
            </svg>
          
            The AM2320Element allows retrieving temperature and humidity values  and creates actions when new values are available.

          </div>
        
        <p>The AM2320 sensor was created to be a drop-in replacement for the DHT22 but also support the i2c interface.</p>
<h3>DHT and I2C support</h3>
<p>The AM2320 sensor was created to be a drop-in replacement for the DHT22 but also support the i2c interface. There is a good article on comparing these two interfaces:
See <a href="https://learn.adafruit.com/modern-replacements-for-dht11-dht22-sensors">https://learn.adafruit.com/modern-replacements-for-dht11-dht22-sensors</a>
for the advantage of i2c over DHT22 Wire signals.</p>
<p>When using the DHT mode it is important to set pin 3 and 4 to permanent GND level.
You can use the <a href="/elements/dht.htm">DHT Element</a> to implement reading the temperature and humidity values.</p>
<p>When using the <a href="/dev/i2c.htm">I2C mode</a> pin 3 is used for GND and pin 4 is used for the i2c-clk signal.
The device may not respond at the first request
as it stays in an deactivated mode and must be waked up using a i2c read request without data.</p>
<p>The WireUtils do this when checking for a device to exist on a given address.</p>
<h2>Web UI for the AM2320 Element</h2>
<p>There is a dedicated card for sensors supporting temperature and humidity that shows the actual values.</p>
<p><img src="/elements/dhtui.png" alt="T/H Sensor UI"></p>
<h2>Using the AM2320 Element</h2>
<p>The AM2320 Element is not part of the core set of elements as it is not used very frequently. It can be registered and added to the firmware by including the definition of
<code>HOMEDING_INCLUDE_AM2320</code> in the sketch:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Use some more Elements that need additional libraries</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOMEDING_INCLUDE_AM2320</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;HomeDing.h></span></span></code></pre>
<h2>Connecting a AM2320 Sensor</h2>
<p>The sensor is using the I2C bus for communication and is usually placed on a adapter board
giving access to the required pins.</p>
<p>Using the default I2C bus pins:</p>
<table>
<thead>
<tr>
<th>Signal</th>
<th>ESP8266</th>
<th>ESP32</th>
<th>Sensor</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="gpio black">GND</span></td>
<td>GND</td>
<td>GND</td>
<td>3 GND</td>
<td>Ground for I2C and Power Supply</td>
</tr>
<tr>
<td><span class="gpio red">VCC</span></td>
<td>3.3v</td>
<td>3.3v</td>
<td>1 VCC/VDD</td>
<td>Power Supply</td>
</tr>
<tr>
<td><span class="gpio blue">SDA</span></td>
<td>GPIO4(D2)</td>
<td>IO21</td>
<td>2 SDA</td>
<td>I2C Data Signal</td>
</tr>
<tr>
<td><span class="gpio yellow">SCL</span></td>
<td>GPIO5(D1)</td>
<td>IO22</td>
<td>4 SCL</td>
<td>I2C Clock Signal</td>
</tr>
</tbody>
</table>
<p>The required power for the sensor is low and the 3.3V from most CPU boards can be used.</p>
<p>For more details on using the i2c bus and specifying pins in the <a href="/elements/device.htm">Device Element</a> see <a href="/dev/i2c.htm">I2C bus</a>.</p>
<h2>Element Configuration</h2>
<p>The following properties are available for configuration of the element:</p>
<blockquote>
<p><strong>address</strong> - The i2c address of the sensor. The default value is 0x40.</p>
<p><strong>onTemperature</strong> - These actions are emitted by the element when the temperature gets a new value. The action will not be sent when reading the sensor values that stay the same.</p>
<p><strong>onHumidity</strong> - These actions are emitted by the element when the humidity gets a new value. The action will not be sent when reading ne sensor values that stay the same.</p>
</blockquote>
<p>From the base <a href="/elements/sensors.htm">Sensor Element</a> implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>readTime</strong> – Time between 2 probes being fetched from the sensor. Default value is 1m.</p>
<p><strong>resendTime</strong> – The current values of the probe are resent after this specified time even when not changing.</p>
<p><strong>warmupTime</strong> – This time is waited after powering the sensor on the first start or after a reset before the first data is fetched.
The default time is set to 3 seconds.</p>
<p><strong>restart</strong> – This property can be set to true to enable an automated restart when the sensor was not responding data.</p>
</blockquote>
<p>From the base element implementation the following properties are available for configuration:</p>
<blockquote>
<p><strong>title</strong> – Caption text for the element. Used by the element specific cards on the dash boards.</p>
<p><strong>description</strong> – A line of text that gives a short description of the device used in the web UI.</p>
<p><strong>room</strong> – The location of the device.</p>
<p><strong>loglevel</strong> – This property holds the element specific log level. The default value is LOGGER_LEVEL_ERR == 1.</p>
<p><strong>startup</strong> – This property can be used to start the element using a different initialization phase.
Possible values are “sys”, “net”, “time”. See <a href="/dev/startup.htm">The Startup sequence</a>.</p>
</blockquote>
<h3>Configuration Example</h3>
<p>This example shows how to configure this element:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"am2320"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"s"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"AM2320"</span><span class="token punctuation">,</span>
      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Temperature and Humidity sensor"</span><span class="token punctuation">,</span>
      <span class="token property">"readtime"</span><span class="token operator">:</span> <span class="token string">"30s"</span><span class="token punctuation">,</span>
      <span class="token property">"onHumidity"</span><span class="token operator">:</span> <span class="token string">"displaytext/h?value=$v"</span><span class="token punctuation">,</span>
      <span class="token property">"onTemperature"</span><span class="token operator">:</span> <span class="token string">"displaytext/t?value=$v"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Element State</h2>
<p>The following properties are available with the current values at runtime</p>
<blockquote>
<p><strong>active</strong> - Is set to true when the element is active.</p>
<p><strong>temperature</strong> - The last read temperature value from the sensor.</p>
<p><strong>humidity</strong> - The last read humidity value from the sensor.</p>
</blockquote>
<h3>Example State</h3>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"am2320/s"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"active"</span><span class="token operator">:</span><span class="token string">"true"</span><span class="token punctuation">,</span>
    <span class="token property">"temperature"</span><span class="token operator">:</span><span class="token string">"27.30"</span><span class="token punctuation">,</span>
    <span class="token property">"humidity"</span><span class="token operator">:</span><span class="token string">"50.50"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>See Also</h2>
<ul>
<li><a href="http://www.aosong.com/en/products-41.html">http://www.aosong.com/en/products-41.html</a></li>
<li><a href="https://learn.adafruit.com/modern-replacements-for-dht11-dht22-sensors">https://learn.adafruit.com/modern-replacements-for-dht11-dht22-sensors</a></li>
</ul>

        
          <h2>Tags</h2>
          <div class="taglist">
            
              <a href="/tag/element.htm">Element</a>
            
              <a href="/tag/sensor.htm">Sensor</a>
            
          </div>
        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>