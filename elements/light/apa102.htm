<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc" />
  <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353" />
  <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
  <title>APA102 Element</title>
  <meta name='description' content='Examples and documentation for the HomeDing IoT Library'>
  <link Content-Type="text/css" href="/docstyle.css" rel="stylesheet" />
  <script src="/pages.js"></script>
  <script src="/story.js" type="module"></script>
  <style>
  .gpio { 
    display:inline-block;
    padding: 0 4px;
    border-radius: 4px;
    }
  .gpio.yellow {background-color: #FF0;}
  .gpio.red {background-color: #F22; color:white}
  .gpio.black {background-color: #111; color:white}
  .gpio.blue {background-color: #22F; color:white}
  main h2 {margin-top: 1rem !important;}
  </style>
</head>

<body scroll="0" style="padding:0;">
  <div class="u-navbar" style="margin-bottom: 0;">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z" />
    </svg>

    <a href="/index.htm" class="button">Home</a>
    <a href="/elements/index.htm" class="button">Elements</a>
    <a href="/boards/index.htm" class="button">Boards</a>
    <a href="/recipes/index.htm" class="button">Recipes</a>
  </div>

  <nav></nav>

  <main style="padding:1rem;max-width: 800px;">
    <h1>APA102 Element</h1>

    
    
      <div class="iconcard"><svg class="icon"><use href="/icons.svg#led"></use></svg>
    
    The APA102Element implements ... 
</div>
      
    <ul>
<li>dPin == pins[0]</li>
<li>cPin == pins[1]</li>
</ul>
<p>num = 1</p>
<h2>Links</h2>
<p>APA102 Vs. APA102C: <a href="https://forums.adafruit.com/viewtopic.php?t=66973">https://forums.adafruit.com/viewtopic.php?t=66973</a></p>
<p><a href="https://hackaday.io/project/21293-digital-led-display-apa107apa102ws2812bsk6812/">https://hackaday.io/project/21293-digital-led-display-apa107apa102ws2812bsk6812/</a></p>
<p><a href="https://github.com/pololu/apa102-arduino/blob/master/APA102.h">https://github.com/pololu/apa102-arduino/blob/master/APA102.h</a></p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Copyright Pololu Corporation.  For more information, see http://www.pololu.com/</span><br><br><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><br><br><span class="token comment">/*! \file APA102.h<br> * This is the main header file for the APA102 library. */</span><br><br><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h></span></span><br><br><span class="token keyword">namespace</span> Pololu<br><span class="token punctuation">{</span><br>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_POLOLU_RGB_COLOR</span></span><br>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_POLOLU_RGB_COLOR</span></span><br>  <span class="token comment">/*! A struct that can be used to represent colors.  Each field is a number<br>   * between 0 and 255 that represents the brightness of a component of the<br>   * color. */</span><br>  <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">rgb_color</span><br>  <span class="token punctuation">{</span><br>    <span class="token keyword">uint8_t</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">;</span><br>    <span class="token function">rgb_color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><br>    <span class="token function">rgb_color</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> r<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> g<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">red</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">green</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">blue</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span> rgb_color<span class="token punctuation">;</span><br>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><br><br>  <span class="token comment">/*! An abstract base class for APA102.  This class is useful if you want<br>   *  to have a pointer that can point to different APA102 objects.<br>   *<br>   * The only virtual function provided by this class is write() because making<br>   * the low-level functions be virtual causes a noticeable slowdown.<br>   */</span><br>  <span class="token keyword">class</span> <span class="token class-name">APA102Base</span><br>  <span class="token punctuation">{</span><br>  <span class="token keyword">public</span><span class="token operator">:</span><br>    <span class="token comment">/*! Writes the specified colors to the LED strip.<br>     *<br>     * @param colors A pointer to an array of colors.<br>     * @param count The number of colors to write.<br>     * @param brightness A 5-bit brightness value (between 0 and 31) that will<br>     *   be written to each LED.<br>     */</span><br>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>rgb_color <span class="token operator">*</span> colors<span class="token punctuation">,</span> <span class="token keyword">uint16_t</span> count<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> brightness <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><span class="token punctuation">;</span><br><br>  <span class="token comment">/*! A template class that represents an APA102 or SK9822 LED strip controlled<br>   * by a particular clock and data pin.<br>   *<br>   * @param dataPin The Arduino pin number or name for the pin that will be<br>   *   used to control the data input.<br>   *<br>   * @param clockPin The Arduino pin number or name for the pin that will be<br>   *   used to control the clock input.<br>   */</span><br>  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">uint8_t</span> dataPin<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> clockPin<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">APA102</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">APA102Base</span></span><br>  <span class="token punctuation">{</span><br>  <span class="token keyword">public</span><span class="token operator">:</span><br><br>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>rgb_color <span class="token operator">*</span> colors<span class="token punctuation">,</span> <span class="token keyword">uint16_t</span> count<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> brightness <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">)</span><br>    <span class="token punctuation">{</span><br>      <span class="token function">startFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><br>      <span class="token punctuation">{</span><br>        <span class="token function">sendColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> brightness<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token punctuation">}</span><br>      <span class="token function">endFrame</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><br>    <span class="token comment">/*! Initializes the I/O lines and sends a "Start Frame" signal to the LED<br>     *  strip.<br>     *<br>     * This is part of the low-level interface provided by this class, which<br>     * allows you to send LED colors as you are computing them instead of<br>     * storing them in an array.  To use the low-level interface, first call<br>     * startFrame(), then call sendColor() some number of times, then call<br>     * endFrame(). */</span><br>    <span class="token keyword">void</span> <span class="token function">startFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>    <span class="token punctuation">{</span><br>      <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><br>    <span class="token comment">/*! Sends an "End Frame" signal to the LED strip.  This is the last step in<br>     * updating the LED strip if you are using the low-level interface described<br>     * in the startFrame() documentation.<br>     *<br>     * After this function returns, the clock and data lines will both be<br>     * outputs that are driving low.  This makes it easier to use one clock pin<br>     * to control multiple LED strips. */</span><br>    <span class="token keyword">void</span> <span class="token function">endFrame</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span> count<span class="token punctuation">)</span><br>    <span class="token punctuation">{</span><br>      <span class="token comment">/* The data stream seen by the last LED in the chain will be delayed by<br>       * (count - 1) clock edges, because each LED before it inverts the clock<br>       * line and delays the data by one clock edge.  Therefore, to make sure<br>       * the last LED actually receives the data we wrote, the number of extra<br>       * edges we send at the end of the frame must be at least (count - 1).<br>       *<br>       * Assuming we only want to send these edges in groups of size K, the<br>       * C/C++ expression for the minimum number of groups to send is:<br>       *<br>       *   ((count - 1) + (K - 1)) / K<br>       *<br>       * The C/C++ expression above is just (count - 1) divided by K,<br>       * rounded up to the nearest whole number if there is a remainder.<br>       *<br>       * We set K to 16 and use the formula above as the number of frame-end<br>       * bytes to transfer.  Each byte has 16 clock edges.<br>       *<br>       * We are ignoring the specification for the end frame in the APA102<br>       * datasheet, which says to send 0xFF four times, because it does not work<br>       * when you have 66 LEDs or more, and also it results in unwanted white<br>       * pixels if you try to update fewer LEDs than are on your LED strip. */</span><br><br>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint16_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><br>      <span class="token punctuation">{</span><br>        <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token punctuation">}</span><br><br>      <span class="token comment">/* We call init() here to make sure we leave the data line driving low<br>       * even if count is 0 or 1. */</span><br>      <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><br>    <span class="token comment">/*! Sends a single 24-bit color and an optional 5-bit brightness value.<br>     * This is part of the low-level interface described in the startFrame()<br>     * documentation. */</span><br>    <span class="token keyword">void</span> <span class="token function">sendColor</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> red<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> green<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> blue<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> brightness <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">)</span><br>    <span class="token punctuation">{</span><br>      <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">0b11100000</span> <span class="token operator">|</span> brightness<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">transfer</span><span class="token punctuation">(</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">transfer</span><span class="token punctuation">(</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">transfer</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><br>    <span class="token comment">/*! Sends a single 24-bit color and an optional 5-bit brightness value.<br>     * This is part of the low-level interface described in the startFrame()<br>     * documentation. */</span><br>    <span class="token keyword">void</span> <span class="token function">sendColor</span><span class="token punctuation">(</span>rgb_color color<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> brightness <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">)</span><br>    <span class="token punctuation">{</span><br>      <span class="token function">sendColor</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span>red<span class="token punctuation">,</span> color<span class="token punctuation">.</span>green<span class="token punctuation">,</span> color<span class="token punctuation">.</span>blue<span class="token punctuation">,</span> brightness<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><br>  <span class="token keyword">protected</span><span class="token operator">:</span><br>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>    <span class="token punctuation">{</span><br>      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">APA102_USE_FAST_GPIO</span></span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>dataPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">pinMode</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">pinMode</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><br>    <span class="token punctuation">}</span><br><br>    <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> b<span class="token punctuation">)</span><br>    <span class="token punctuation">{</span><br>      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">APA102_USE_FAST_GPIO</span></span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>dataPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValue</span><span class="token punctuation">(</span>b <span class="token operator">>></span> <span class="token number">7</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>dataPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValue</span><span class="token punctuation">(</span>b <span class="token operator">>></span> <span class="token number">6</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>dataPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValue</span><span class="token punctuation">(</span>b <span class="token operator">>></span> <span class="token number">5</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>dataPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValue</span><span class="token punctuation">(</span>b <span class="token operator">>></span> <span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>dataPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValue</span><span class="token punctuation">(</span>b <span class="token operator">>></span> <span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>dataPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValue</span><span class="token punctuation">(</span>b <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>dataPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValue</span><span class="token punctuation">(</span>b <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>dataPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValue</span><span class="token punctuation">(</span>b <span class="token operator">>></span> <span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      FastGPIO<span class="token double-colon punctuation">::</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span>clockPin<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">setOutputValueLow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">7</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">6</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">5</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>dataPin<span class="token punctuation">,</span> b <span class="token operator">>></span> <span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>clockPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><br>      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><br>    <span class="token punctuation">}</span><br><br>  <span class="token punctuation">}</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">using</span> <span class="token keyword">namespace</span> Pololu<span class="token punctuation">;</span></code></pre>


    
    <h2>Tags</h2>
    <div class="taglist"><a href="/tag/element.htm">Element</a><a href="/tag/.htm"></a><a href="/tag/light.htm">Light</a></div>
    
  </main>

  <script>
    const param = {
      MENU_MIN_WIDTH: 1030
    };

    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');

   if (window.innerWidth > param.MENU_MIN_WIDTH) {
      // menu is inside the page
      navObj.classList.add('open');
      navObj.classList.add('inpage');
    }

    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });

    lazyLoadHTM('nav', '/toc.htm');
  </script>
  
  </body>

</html>