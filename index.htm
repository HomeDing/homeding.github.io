<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc" />
  <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353" />
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <title>The HomeDing Library</title>
  <meta name="title" content="The HomeDing Library">
  <meta property="og:description" content="An Arduino Library that makes Iot devices building easy.">

  <meta property="og:type" content="website">
  <meta property="og:url" content="https://homeding.github.io/">
  <meta property="og:title" content="The HomeDing Library">
  <meta property="og:image" content="homeding.png">

  <link Content-Type="text/css" href="/docstyle.css" rel="stylesheet" />
  <script src="/pages.js"></script>
  <script src="/story.js" type="module"></script>
  <style>
  .gpio { 
    display:inline-block;
    padding: 0 4px;
    border-radius: 4px;
    }
  .gpio.yellow {background-color: #FF0;}
  .gpio.red {background-color: #F22; color:white}
  .gpio.black {background-color: #111; color:white}
  .gpio.blue {background-color: #22F; color:white}
  </style>
</head>

<body scroll="0" style="padding:0;">
  <div class="u-navbar" style="margin-bottom: 0;">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z" />
    </svg>

    <a href="/index.htm" class="button">Home</a>
    <a href="/elements/index.htm" class="button">Elements</a>
    <a href="/boards/index.htm" class="button">Boards</a>
    <a href="/recipes/index.htm" class="button">Recipes</a>
  </div>

  <nav></nav>

  <main style="padding:1rem;max-width: 800px;">
    <h1>The HomeDing Library</h1>

    
    
      <div class="plaincard">
    
    The HomeDing library was created to implement standalone IoT devices with the Arduino framework easily.
Using cloud services or MQTT are options but not required.
Connect to your home WiFi using a simple form and then customize using a low code and easy configuration.
The built-in web server with a rich user interface allows controlling the device and shows all information of the connected sensors and peripherals.
Make your own by using the Arduino development environment.
</div>
      
    <h2>Making IoT easy</h2>
<p>The main goals and the driving reasons for implementing the HomeDing library are simplicity in creating new IoT devices that can run on their own and have no need for cloud services. All you need is a standard browser.</p>
<p>They have all you need built-in:</p>
<ul>
<li>A firmware that knows how to interact with a lot of possible sensors and chips</li>
<li>A web server to host the UI files and the api.</li>
<li>A editor for configuration</li>
<li>A page to view data and control the device.</li>
</ul>
<h2></h2>
<style>
.page {
position: relative;
width: 800px;
height: 600px;
padding: 2em 3em;
margin-bottom: 1em;
border-radius: 2em;
background-color: #f8f8f8;
}

.page>.row {
display: flex;
}

li:not(:last-child) {
margin-bottom: 0.6em;
}

.page>.background {
position: absolute;
z-index: -1;
display: block;
top: 0;
left: 0px;
width: 100%;
height: 100%;
}

.time {
position: absolute;
background-color: yellow;
top: 0;
right: 4px;
height: 100%;
width: 24px;
}

.time>.time {
background-color: #e0e0e0;
left: 12px;
width: 12px;
height: 600px;
}

.marker {
display: inline-block;
vertical-align: baseline;
width: 12px;
height: 12px;
border-radius: 50%;
background-color: green;
}

.marker.enter {
background-color: #22ff22;
}

.marker.shown {
background-color: yellow;
}

.marker.exit {
background-color: orange;
}

.marker.hidden {
background-color: #ff2222;
}

.time>.marker {
position: absolute;
left: 0px;
}
</style>
<div class="story">
<div id="p1" class="page" is="story-page">
<h2>Home made IoT devices</h2>
<p>The HomeDing Library provides the foundation for easy implementation of IoT devices with the Arduino environment.</p>
<div class="row">
<div class="col" style="flex: 40%;">
<object id="hds" data="/home/hd-story.svg" style="height:300px;width:300px;"></object>
</div>
<div class="col" style="flex: 60%;">
<div is="svg-rotate" ref="#hds:#chip" dur="1000ms"></div>
<div is="story-animate" dur="1s" wait="3s" s-from="opacity:0;">
<p>The core of IoT devices is a <b>microprocessor</b> like an ESP8266 or ESP32
with many features at a low price.</p>
</div>
<div is="story-svg-show" ref="#hds:#pinIn" dur="250ms"></div>
<div is="story-svg-show" ref="#hds:#pinOut" dur="250ms"></div>
<div is="story-svg-show" ref="#hds:#pin-01" dur="250ms"></div>
<div is="story-animate" dur="1s" s-from="opacity:0;">
<p>They have many <b>pins</b> that can be used as input and output signals,
very useful for attaching sensors, lights, displays or motors.</p>
</div>
<div is="story-svg-move" ref="#hds:#wifi" from="-40 -50" dur="2s"></div>
<div is="story-animate" dur="1s" s-from="opacity:0;">
<p><b>WiFi</b> is als built in, making it easy to connect using a browser through your home network.</p>
</div>
<div is="story-svg-move" ref="#hds:#tRam" dur="400ms" from="80 -50"></div>
<div is="story-svg-move" ref="#hds:#tFlash" dur="400ms" from="80 -50"></div>
<div is="story-svg-move" ref="#hds:#tCPU" dur="400ms" from="80 -50"></div>
<div is="story-animate" dur="1s" s-from="opacity:0;">
<p>The free Arduino programing environment has all the tools to create and upload the program
into the microprocessor, easy to learn for beginners and feature rich for professionals.</p>
</div>
<div is="story-svg-show" ref="#hds:#tProgram" dur="400ms" dur="2s"></div>
</div>
</div>
<div id="q1" is="story-animate" dur="2s" s-from="opacity:0;font-size:50%" style="font-size:200%">
What makes HomeDing different ?
</div>
<div is="story-svg-show" ref="#hds:#tHomeDing" dur="500ms"></div>
</div>
<div id="p2" class="page" is="story-page">
<h2>1. Configuration</h2>
<p>The HomeDing library offers more than just a program including powerful configuration feature.</p>
<p> You can use one of the provided <u>examples</u> without modification to run your device
that contains the code required for many use cases. Functionality is activated and orchestrated
by configuration. No need to bring your device back to the computer, all can be done from remote:
</p>
<div class="row">
<div class="col" style="flex: 40%;">
<object id="hdb" data="/home/hd-blocks.svg" style="height:300px;width:300px;"></object>
</div>
<div class="col" style="flex: 60%;">
<ul>
<div is="svg-rotate" ref="#hdb:#tHomeDing" dur="1000ms" wait="1000ms"></div>
<div is="story-svg-hide" ref="#hdb:#tHomeDing" dur="1000ms" wait="1000ms"></div>
<div is="story-svg-show" ref="#hdb:#gWiFi" dur="1000ms" wait="1000ms"></div>
<div is="story-svg-show" ref="#hdb:#gServer" dur="1000ms" wait="1000ms"></div>
<div is="story-svg-show" ref="#hdb:#gFiles" dur="1000ms" wait="1000ms"></div>
<div is="story-svg-show" ref="#hdb:#gElements" dur="1000ms" wait="1000ms"></div>
<li>The integrated <u>Web Server</u> enables you to reach and interact with your device
using a standard modern browser.</li>
<li>The built-in <u>WiFi Manager</u> help you connecting the device to your local WiFi.</li>
<li>Changing and enhancing the functionality of your device can be done without reprogramming.</li>
<li>All the device can do is based on the <u>Elements</u> of the HomeDing library that
implement each a very specific functionality.</li>
<li>There are Elements for <u>Sensors</u>, digital and analog <u>Signals</u>,
<u>Displays</u>, <u>Time and Timing</u>, <u>Logic and Calculation</u> and more.
They all "sleep" inside the code and wait to be configured.
</li>
<li>A Element can be activated by adding <u>configuration</u> properties
to the config files e.g. used pins by a sensor.</li>
</ul>
</div>
</div>
</div>
<div id="p3" class="page" is="story-page">
<h2>2. Automation</h2>
<p>To react on sensor values or to handle a specific situation the Elements can interact
and rules can be applied:</p>
<p><object id="hda" data="/home/hd-actions.svg" style="height: 200px;width: 600px"></object></p>
<div is="story-svg-fill" ref="#hda:#pIn" dur="600ms" wait="1000ms" color="#00aa00"></div>
<div is="story-svg-fill" ref="#hda:#pIn" dur="600ms" color="silver"></div>
<div is="story-svg-show" ref="#hda:#a1g" dur="1250ms" wait="500ms"></div>
<div is="story-svg-move" ref="#hda:#a1g" dur="1250ms" to="18 0"></div>
<div is="story-svg-text" ref="#hda:#timerTxt" txt="3" wait="500ms"></div>
<div is="story-svg-hide" ref="#hda:#a1g" dur="1250ms" wait="500ms"></div>
<div is="story-svg-show" ref="#hda:#a2g" dur="1250ms" wait="500ms"></div>
<div is="story-svg-move" ref="#hda:#a2g" dur="1250ms" to="18 0" wait="500ms"></div>
<div is="story-svg-fill" ref="#hda:#pOut" dur="400ms" color="#00aa00" wait="500ms"></div>
<div is="story-svg-hide" ref="#hda:#a2g" dur="1250ms" wait="500ms"></div>
<div is="story-svg-text" ref="#hda:#timerTxt" txt="2" wait="1000ms"></div>
<div is="story-svg-text" ref="#hda:#timerTxt" txt="1" wait="1000ms"></div>
<div is="story-svg-text" ref="#hda:#timerTxt" txt="0"></div>
<div is="story-svg-show" ref="#hda:#a2r" dur="1250ms" wait="500ms"></div>
<div is="story-svg-move" ref="#hda:#a2r" dur="1250ms" to="18 0" wait="500ms"></div>
<div is="story-svg-fill" ref="#hda:#pOut" dur="400ms" color="silver" wait="500ms"></div>
<div is="story-svg-hide" ref="#hda:#a2r" dur="1250ms" wait="500ms"></div>
<div is="story-svg-show" ref="#hda:#pOut" dur="1250ms" wait="500ms"></div>
<ul>
<li>Events occur within <u>Elements</u> when a new value was given by the sensor,
when a timing condition is met or by some calculations.</li>
<li>Based on events Elements can send <u>Actions</u> to other elements
to start processing in the target element.</li>
<li>Combining multiple elements this way enables building complex automations
and functionality.</li>
<li>The Actions based programming model is not limited to a single device
but Actions can be sent over the network to other devices
to support even more complex scenario.</li>
<li>To integrate a device into a Home Automation server
Actions can be used to create and send MQTT messages.</li>
</ul>
<!-- <button onclick="p3.storyAction('reset')">reset</button><button onclick="p3.storyAction('start')">start</button> -->
</div>
<div id="p4" class="page" is="story-page">
<h2>3. Accessible by Browser</h2>
<p>There is a built-in Web Server
that lets you inspect, control and configure the device.</p>
<ul>
<li>The <u>Board</u> shows tiles/cards for all activated <u>Elements</u>
including the current state and data like sensor values.</li>
<li>The <u>IDE</u> enables accessing and modifying the files in the device
especially the configuration of the Element in the device.</li>
<li>The <u>LOG</u> can be inspected containing information about the state, problems and progress.</li>
<li>The <u>Web Services</u> are used by the Web UI like the dashboard
but can also be used from other devices and servers.
This allows combining multiple devices exchanging <u>Actions</u> over the network.</li>
</ul>
</div>
</div>
<h2>IoT devices can be used standalone</h2>
<blockquote>
<p>Everything for a useful device fits into the memory available on a standard ESP8266 or ESP32 board.
There is no need for a central hub or bridge device - ideal for starting with implementing IoT devices.</p>
</blockquote>
<h2>No Cloud connection</h2>
<blockquote>
<p>In contrast to many IoT solutions from vendors that rely on some functionality given by a central implementation in the cloud the HomeDing based devices
are designed to be used without any cloud support and can run without being connected to the internet.</p>
</blockquote>
<h2>Using the Arduino Environment</h2>
<blockquote>
<p>To enable everyone to create IoT devices easily, the HomeDing library is available in the format of an Arduino library.</p>
<p>All you get is OpenSource and a lot of documentation to learn implementing your features.</p>
</blockquote>
<h2>Easy to be used</h2>
<blockquote>
<p>Many of the standard problems that need to be solved for building IoT devices have been implemented in the library.</p>
<p>Just use one of the <a href="/examples/index.htm">examples</a> as a starting code and upload it to the device.</p>
</blockquote>
<h2>No programming skills required</h2>
<blockquote>
<p>One of the powerful features of the HomeDing library is the availability of specialized elements that can be configured to work together and build solutions.</p>
<p>Start by building your first IoT device by using some of the configuration examples from the <a href="/recipes/index.htm">recipes</a>.</p>
</blockquote>
<h2>Web enabled</h2>
<h2>Web interface</h2>
<blockquote>
<p>Every device based on the Homeding library is connected to the local WiFi network and has a <a href="/concepts/paper04.htm">Web Server</a>
and a small Web Site built-in to visualize the current functionality or to configure some new functionality using a standard web browser.</p>
<p>The IoT devices all offer a full functional web frontend User Interface (UI) based on the web technologies HTML+CSS+JavaScript.</p>
<p>The build-in Web Server also offers a programmable interface by using REST+JSON based <a href="/dev/webservices.htm">Web-Services</a>.</p>
<p>Again, just using the given implementation is an option to start quickly as there are widgets for many of the elements
that allow inspecting, controlling and configuration using a standard browser.</p>
<p>If you like to extend the UI capabilities you can find some documentation in <a href="/dev/index.htm">Implementation Details</a> to see
how the full functional Web UI is built with the reduced memory available in microprocessor environments.</p>
</blockquote>
<h2>Processors supported</h2>
<blockquote>
<p>The library is currently made especially for the ESP8266 and ESP32 based boards like the NodeMCU or ESP32-DevKit or similar ones.
The Arduino environments are used for implementation to keep this easy for DIY projects.</p>
<p>Many sensors, displays, input and output functionality is available as <a href="/elements/index.htm">elements</a>.</p>
<p>For some <a href="/boards/index.htm">boards</a> you can find reviews and summaries with a suitable the configuration of the system.</p>
</blockquote>
<h2>Open Source</h2>
<blockquote>
<p>The project is Open Source available on GitHub and all files are licensed under a BSD style license.
See <a href="http://www.mathertel.de/License.aspx">http://www.mathertel.de/License.aspx</a></p>
<p>The full documentation is available at: <a href="https://homeding.github.io/">https://homeding.github.io/</a></p>
<p>Some text on the concepts and architecture of this library.</p>
<ul>
<li><a href="/concepts/paper01.htm">Build your own things easily</a></li>
<li><a href="/concepts/paper02.htm">Software Architecture</a></li>
<li><a href="/concepts/paper03.htm">Elements and Actions</a></li>
<li><a href="/concepts/paper04.htm">Web Server</a></li>
</ul>
</blockquote>
<h2>Elements</h2>
<blockquote>
<p>Elements are the functional blocks for building and configuring a device and they interact using actions.</p>
<p>Each element supports a unique feature, e.g. reads a sensor, drives a display, connects some peripheries or implements some internal logic.</p>
<p>The list of the <a href="/elements/index.htm">elements</a> already provided within this library,
the <a href="/examples/index.htm">examples</a> and the <a href="/recipes/index.htm">recipes</a> show you the available features that can be configured.</p>
<p>It is intentionally easy to implement your own specific elements as you can see in some of the <a href="/examples/index.htm">examples</a>.</p>
</blockquote>
<h2>Configuration</h2>
<blockquote>
<p>Instead of compiling and uploading a new firmware to the device every time a change is required
the library provides configuration possibilities at runtime.</p>
<p>The configuration of the device implemented as a JSON file activates and configures the required elements
as well as defining how the interact with each other and to the outer world over network.</p>
</blockquote>
<h2>See also</h2>
<blockquote>
<p>Extend and Implement for your needs</p>
<ul>
<li>See: <a href="/concepts/index.htm">Implementation Concepts</a></li>
<li>See: <a href="/dev/index.htm">Implementation References</a></li>
</ul>
<p>From Espressif</p>
<ul>
<li><a href="https://www.espressif.com/en/support/download/documents?keys=ESP8266">ESP8266 documents at espressif</a></li>
<li><a href="https://www.espressif.com/sites/default/files/documentation/esp8266-technical_reference_en.pdf">The ESP8266 Technical Reference</a></li>
<li><a href="https://www.espressif.com/sites/default/files/documentation/0a-esp8266ex_datasheet_en.pdf">ESP8266EX Datasheet</a></li>
</ul>
<p>General Guides</p>
<ul>
<li><a href="https://tttapa.github.io/ESP8266/Chap01%20-%20ESP8266.html">A Beginner’s Guide to the ESP8266</a></li>
</ul>
</blockquote>


    
  </main>

  <script>
    const param = {
      MENU_MIN_WIDTH: 1030
    };

    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');

   if (window.innerWidth > param.MENU_MIN_WIDTH) {
      // menu is inside the page
      navObj.classList.add('open');
      navObj.classList.add('inpage');
    }

    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });

    lazyLoadHTM('nav', '/toc.htm');
  </script>
  
  </body>

</html>