<!DOCTYPE html>
<html lang="en">
<!--
Markdown viewer SPA using
* http://marked.js.org/
* https://highlightjs.org/download/
-->

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>HomeDing Documentation</title>
  <link Content-Type="text/css" href="iotstyle.css" rel="stylesheet" />
  <link rel="stylesheet" href="md/default.min.css" />
  <script src="md/markdown-it.min.js"></script>
  <script src="md/markdown-it-container.min.js"></script>
  <script src="md/highlight.pack.js"></script>

  <style>
    .s-md {
      min-height: 4em;
      padding: 0.4em;
    }

    a.verify {
      /* background-color: #FFFFcc; */
    }

    a.bad {
      background-color: #ffcccc;
    }

    table {
      empty-cells: show;
      border-collapse: collapse;
      background-color: white;
      border-left: solid 1px #203050;
      border-right: solid 1px #203050;
      margin-top: 0.4em;
      margin-bottom: 0.4em;
    }

    table thead tr {
      background-color: #203050;
    }

    table thead tr th {
      vertical-align: top;
      padding: 0.2em 0.6em;
      color: white;
      font-weight: bold;
    }

    table td {
      vertical-align: top;
      padding: 0.2em 0.6em;
      border-bottom: 1px solid #203050;
    }

    img {
      max-width: 600px;
      height: auto;
    }

    p>img {
      width: auto;
      height: auto;
    }

    h2 {
      clear: both;
    }

    .short,
    .board,
    .excerpt {
      position: relative;
      padding: 0.5rem 0.5rem 0 4rem;
      margin-right: 0.5rem;
      min-height: 6rem;
      width: 32rem;
      max-width: 32rem;
      background-color: white;
      margin-bottom: 1rem;
      page-break-inside: avoid;
    }

    .short {
      float: left;
      min-height: 7rem;
    }

    .board {
      padding: 0.5rem 0.5rem 0 11rem;
      min-height: 7rem;
      width: 100%;
      max-width: 100%;
      background-color: #e8e8e8;
    }

    .short img,
    .excerpt img,
    .board img {
      position: absolute;
      top: 0.5rem;
      left: 0.5rem;
      height: 3rem;
    }

    .board img {
      position: absolute;
      top: 0.5rem;
      left: 0.5rem;
      height: auto;
      width: auto;
      max-height: 6rem;
      max-width: 10rem;
    }

    .warning {
      border: 0.2rem solid #ebccd1;
      color: #a94442;
      background-color: #f2dede;
      border-radius: 0.4rem;
    }

    .warning>h3 {
      color: #a94442;
    }

    @media print {

      html,
      body {
        font-size: 0.66em;
        background-color: white;
      }

      .short {
        border: 1px solid silver;
      }
    }
  </style>
</head>

<body scroll="0" style="padding:0;">
  <div class="container-fluid">
    <div class="u-header">
      <a href="/" title="Startpage"><img class="icon" src="i/default.svg" /></a>
      <h1>HomeDing</h1>
    </div>
  </div>
  <div class="u-navbar" style="margin-bottom: 0;">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="menuButton" class="button"
      style="xvertical-align: middle; height:1.4rem">
      <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z" />
    </svg>

    <!-- <a href="#" class="button"><img src="menu.svg"></a> -->
    <a href="#" class="button">Home</a>
    <a href="#page=concepts/paper01.md" class="button">Concepts</a>
    <a href="#page=elements.md" class="button">Elements</a>
    <a href="#page=boards.md" class="button">Boards</a>
    <a href="#page=recipes.md" class="button">Recipes</a>
  </div>
  <nav class="inpage"></nav>
  <main class="container-fluid">
    <div class="row" style="display:none">
      <div class="col">
        <h4>Found Pages:</h4>
        <div id="foundFiles" style="background-color: #ccffff;border: solid 1px lightgrey;padding: 2px;min-height:2em">
        </div>
      </div>
    </div>
    <div class="row" style="display:none">
      <div class="col">
        <h4>Missing Pages:</h4>
        <div id="missingFiles" style="background-color: pink;border: solid 1px red;padding: 2px;min-height:2em"></div>
      </div>
    </div>
    <div class="row"></div>

    <div class="s-md"></div>

  </main>

  <script>
    var ffObj = document.querySelector('#foundFiles');
    var mfObj = document.querySelector('#missingFiles');
    var mbObj = document.querySelector('#menuButton');
    var navObj = document.querySelector('nav');

    mbObj.addEventListener('click', function (e) {
      navObj.classList.toggle('open');
    });
    // alert(window.innerWidth);
    if (window.innerWidth > 880)
      navObj.classList.add('open');

    var md = new markdownit('default', {
      html: true,
      // breaks: false,
      linkify: true,
      langPrefix: 'hljs language-',
      highlight: function (str, lang) {
        if (!hljs.getLanguage(lang))
          lang = "plaintext";
        var t = hljs.highlight(lang, str);
        return (t.value);
      }
    });

    function renderContainer(cn, linkFolder, link, icon) {
      // if no icon is given assume img and content in the link folder
      var div = '<div class="' + cn + '">';
      var img;
      if (icon) {
        img = '<img src="/i/' + icon + '.svg">';
      } else {
        img = '<img src="/' + linkFolder + '/' + link + '.jpg">';
      }
      var l = '<a href="#page=/' + linkFolder + '/' + link + '.md">';

      return (div + l + img + '<h3>' + link + '</h3>' + '</a>');
    }

    var mdc = new markdownitContainer(md, 'excerpt', {
      render: function (tokens, idx) {
        var t = tokens[idx];
        if (t.nesting === 1) {
          var m = t.info.trim().match(/^\s*excerpt\s+(.*)$/);
          var img = (m ? m[1] : 'default');
          return '<div class="excerpt"><img src="/i/' + img + '.svg">\n';
        } else {
          return '</div>\n';
        }
      }
    });


    new markdownitContainer(md, 'board', {
      render: function (tokens, idx) {
        var t = tokens[idx];
        if (t.nesting === 1) {
          var m = t.info.trim().match(/^\s*board\s+(.*)$/);
          return '<div class="board"><a href="#page=/boards/' + m[1] + '.md"> <img src="/boards/' + m[1] + '.jpg"></a>\n';
        } else {
          return '</div>\n';
        }
      }
    });

    new markdownitContainer(md, 'element', {
      render: function (tokens, idx) {
        var t = tokens[idx];
        if (t.nesting === 1) {
          var m = t.info.trim().match(/^\s*element\s+(\S+)\s*(\S*)/);
          return renderContainer('short', 'elements', m[1], m[2]);
        } else {
          return '</div>\n';
        }
      }
    });

    new markdownitContainer(md, 'sensor', {
      render: function (tokens, idx) {
        var t = tokens[idx];
        if (t.nesting === 1) {
          var m = t.info.trim().match(/^\s*sensor\s+(\S+)/);
          return '<div class="board"><img src="/sensors/' + m[1] + '.jpg">\n';
        } else {
          return '</div>\n';
        }
      }
    });

    new markdownitContainer(md, 'warning', {
      render: function (tokens, idx) {
        var t = tokens[idx];
        if (t.nesting === 1) {
          var m = t.info.trim().match(/^\s*warning\s+(.*)$/);
          return '<div class="warning"><h3>Warning</h3>\n';
        } else {
          return '</div>\n';
        }
      }
    });

    function getHashParam(param, defValue) {
      var h = window.location.hash;
      if (h) {
        var params = h.substr(1).split('&');
        for (i = 0; i < params.length; i++) {
          var p = params[i].split('=');
          if (p[0] == param) return p[1];
        } // for
      }
      return defValue;
    } // getHashParam

    /** load a JSON using a URL / rest service or static file */
    function loadFile(url, loadCallback, errorCallback) {
      var req = new XMLHttpRequest();
      req.overrideMimeType('application/text');
      req.open('GET', url);
      // req.onload  = func;
      req.onload = function (x) {
        if (this.readyState == 4) {
          if (this.status == 200) {
            loadCallback(this.responseText);
          } else {
            errorCallback(this);
          }
        }
      };
      req.onerror = errorCallback;
      req.send(null);
    } // loadFile

    function forAllNodeList(nodeList, callbackFn) {
      for (var n = 0; n < nodeList.length; n++) {
        callbackFn(nodeList[n]);
      }
    } // forAllNodeList()

    // === Markdown Loader ===

    var mdClass = {
      _found: [], // list of verified existing files
      _missing: [], // list of verified existing files
      _checking: false,
      checkLinkTimer: 0,

      pushFound: function (pName) {
        if (this._found.indexOf(pName) < 0) this._found.push(pName);
        ffObj.textContent = this._found;
      },

      pushMissing: function (pName) {
        if (this._missing.indexOf(pName) < 0) this._missing.push(pName);
        mfObj.textContent = this._missing;
      },

      checkLink: function () {
        if (!this._checking) {
          var aObj = document.querySelector('a.verify');
          if (!aObj) {
            // finished checking.
            window.clearInterval(this.checkLinkTimer);
          } else {
            var m = aObj.href.match(/=(\w*.md)$/);
            if (m) {
              var fName = m[1].toLowerCase();
              if (this._found.indexOf(fName) >= 0) {
                aObj.classList.remove('verify'); // good link
              } else if (this._missing.indexOf(fName) >= 0) {
                aObj.classList.remove('verify');
                aObj.classList.add('bad'); // bad link
              } else {
                this._checking = true;
                loadFile(
                  /* "md/" + */ fName,
                  function (txt) {
                    // found
                    this.pushFound(fName);
                    this._checking = false;
                  }.bind(this),
                  function (x) {
                    this.pushMissing(fName);
                    this._checking = false;
                  }.bind(this)
                );
              }
            }
          } // if
        } // if
      }, // checkLink()

      // show given text as html.
      setText: function (fName, txt) {
        var hText = md.render(txt);

        // modify links to work:

        hText = hText.replace(/href="([\w\-\/]+).md"/g, 'href="#page=$1.md"');
        hText = hText.replace(/href="([\w\-\/]+)"/g, 'href="#page=$1.md"');
        this.innerHTML = hText;

        // verify all local .md links
        forAllNodeList(
          this.querySelectorAll('a[href]'),
          function (aObj) {
            if (aObj.href.match(/=([\w\-\/]+.md)$/)) aObj.classList.add('verify');
          }.bind(this)
        );
      },

      // init, when slide behavior is attached.
      init: function () {
        this.onhashchange(); // initial navigation
        this._checking = false;
      },

      // check for #page=xxx.md
      onhashchange: function (/* evt */) {
        var pName = getHashParam('page', 'start.md').toLowerCase();

        loadFile(
          pName,
          function (txt) {
            this.setText(pName, txt);
            window.scrollTo(0, 0);
            this.pushFound(pName);
            this.checkLinkTimer = window.setInterval(this.checkLink.bind(this), 100);
          }.bind(this),
          function (x) {
            this.setText(pName, '>> File with name ' + pName + ' not found.');
          }.bind(this)
        );
      }
    };

    var tocObj = document.querySelector('nav');

    loadFile('toc.md',
      function (txt) {
        var hText = md.render(txt);
        hText = hText.replace(/href="([\w\-\/]+).md"/g, 'href="#page=$1.md"');
        hText = hText.replace(/href="([\w\-\/]+)"/g, 'href="#page=$1.md"');
        tocObj.innerHTML = hText;
      }.bind(this),
      function (x) {
        this.setText(pName, '>> File with name ' + pName + ' not found.');
      }.bind(this)
    );


    // manually attach md container
    var mdObj = document.querySelector('.s-md');
    if (mdObj) {
      mdObj._found = mdClass._found;
      mdObj._missing = mdClass._missing;
      mdObj.init = mdClass.init;
      mdObj.checkLink = mdClass.checkLink;
      mdObj.pushFound = mdClass.pushFound;
      mdObj.pushMissing = mdClass.pushMissing;
      mdObj.setText = mdClass.setText;
      mdObj.onhashchange = mdClass.onhashchange;
      window.addEventListener('hashchange', mdObj.onhashchange.bind(mdObj));
      mdObj.init();
    }
  </script>
</body>

</html>