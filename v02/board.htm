<!doctype html>
<html lang="en">

<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>Board</title>

  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <meta name="application-name" content="Ding" />
  <meta name="msapplication-config" content="/browserconfig.xml" />
  <meta name="msapplication-TileColor" content="#2b5797" />
  <meta name="msapplication-TileImage" content="/favicon144.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon180.png" />
  <meta name="mobile-web-app-capable" content="yes" />
  <link rel="manifest" href="/manifest.json" />
  <meta name="theme-color" content="#ffffff" />
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">

  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

  <style>
    span.activeState,
    span.setconfig {
      position: absolute;
      top: 0.5rem;
      height: 1.4rem;
      width: 1.4rem;
      background-size: 1.4rem;
    }

    span.activeState {
      right: 0.5rem;
      background-image: url(/i/stop.svg);
    }

    span.activeState.active {
      background-image: url(/i/start.svg);
    }

    span.setconfig {
      position: absolute;
      right: 2.2rem;
      background-image: url(/i/config.svg);
    }


    img,
    #panel {
      user-select: none;
      -ms-user-select: none;
    }

    .hueband,
    .whiteband {
      height: 1.4rem;
      width: 100%;
      border: 1px solid gray;
      margin-bottom: 0.8rem;
    }

    .hueband {
      background: linear-gradient(to right, #ff0000 0%, #ffff00 17%, #00ff00 33%, #00ffff 50%, #0000ff 67%, #ff00ff 83%, #ff0000 100%);
    }

    .whiteband {
      background: linear-gradient(to right, black 0%, white 100%);
    }


    .point {
      position: relative;
      width: 0;
      height: 0;
      border-color: transparent transparent gray transparent;
      border-width: 0 8px 12px 8px;
      border-style: solid;
    }
  </style>
  <script src="/micro.js"></script>
</head>

<body>
  <div class="container-fluid">
    <div class="u-header">
      <a href="/" title="Start-Page"><img class="icon" src="/favicon.svg" /></a>
      <h1>Board</h1>
    </div>
    <div class="u-navbar">
      <a class="button" href="/">Home</a>
      <a class="button" href="/board.htm">Board</a>
      <a class="button" href="/microide.htm">IDE</a>
      <a class="button" href="/log.htm">Log</a>
      <button id="sysButton" class="func">sys</button>
      <button id="addButton" class="func">+</button>
    </div>

    <div id="panel" class="row wrap"></div>

    <div id="u-templates" style="display:none">
      <div class="col card" u-control="generic" u-is="generic" microID="${id}">
        <div class="block header">
          <svg class="icon">
            <use xlink:href="./icons.svg#no" />
          </svg>
          <h3 u-text="title">--</h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group"><label>Value:</label><span u-text="value"></span></div>
        </div>
      </div>

      <div class="col card" u-control="schedule" id="${id}" u-is="generic" microID="${id}">
        <div class="block header">
          <svg class="icon">
            <use xlink:href="./icons.svg#schedule" />
          </svg>
          <h3 u-text="title"></h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <span class="u-bool ux-value" u-active="value"></span>
          <div class="form-group"><label>Start:</label><span u-text="ontime"></span></div>
          <div class="form-group"><label>End:</label><span u-text="offtime"></span></div>
        </div>
      </div>

      <div class="col card" u-control="dstime" id="${id}" u-is="dstime" microID="${id}">
        <div class="block header">
          <svg class="icon">
            <use xlink:href="./icons.svg#time" />
          </svg>
          <h3 u-text="title"></h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group"><label>ReadTime:</label><input u-value="readtime" type="time" step="1" /></div>
          <div class="form-group"><label>Now:</label><span u-text="now"></span></div>
          <div class="form-group"><label>set Time:</label><span class="now"></span></div>
          <button style="float:right">set</button>
        </div>
      </div>

      <div class="col card" u-control="switch" id="${id}" u-is="switch" microID="${id}">
        <div class="block header">
          <svg class="icon">
            <use xlink:href="./icons.svg#switch" />
          </svg>
          <h3 u-text="title"></h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <span class="u-bool ux-value" u-active="value"></span>
          <div class="u-slider u-switch" u-active="value">
            <label value="0">off</label>
            <div class="box">
              <div class="handle"></div>
            </div>
            <label value="1">on</label>
          </div>
        </div>
      </div>

      <div class="col card" u-control="value" u-is="slider" microID="${id}">
        <div class="block header">
          <svg class="icon">
            <use xlink:href="./icons.svg#value" />
          </svg>
          <h3 u-text="title"></h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group"><label>value:</label><span u-text="value"></span></div>
          <div class="u-slider">
            <label class="down"><svg class="icon">
                <use xlink:href="./icons.svg#minus" />
              </svg></label>
            <div class="box" style="width:240px">
              <div class="handle"></div>
            </div>
            <label class="up"><svg class="icon">
                <use xlink:href="./icons.svg#plus" />
              </svg></label>
          </div>
        </div>
      </div>

      <div class="col card" u-control="and" id="${id}" u-is="generic" microID="${id}">
        <div class="block header">
          <svg class="icon">
            <use xlink:href="./icons.svg#and" />
          </svg>
          <h3 u-text="title"></h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <span class="u-bool ux-value" u-active="value"></span>
          <div class="form-group"><label>value:</label><span u-text="value"></span></div>
        </div>
      </div>

      <div class="col card" u-control="neo" id="${id}" u-is="neo" microID="${id}">
        <div class="block header">
          <svg class="icon">
            <use xlink:href="./icons.svg#neo" />
          </svg>
          <h3 u-text="title"></h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group"><label>value:</label><span u-text="value"></span><span class="color"
              style="width:6rem;"></span></div>
          <div class="hueband" style="height:1.4rem;width:100%;margin-bottom: 0.4rem;"></div>
          <button u-action="mode" value="flow">flow</button>
          <button u-action="mode" value="wheel">wheel</button>
          <button u-action="mode" value="pulse">pulse</button>
        </div>
      </div>

      <div class="col card" u-control="my9291" id="${id}" u-is="neo" microID="${id}">
        <div class="block header">
          <svg class="icon">
            <use xlink:href="./icons.svg#neo" />
          </svg>
          <h3 u-text="title"></h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group"><label>value:</label><span u-text="value"></span><span class="color"
              style="width:6rem;"></span></div>
          <div class="hueband">
            <div class="point"></div>
          </div>
          <div class="whiteband">
            <div class="point"></div>
          </div>
        </div>
      </div>

      <div class="col card" u-control="bl0937" id="${id}" u-is="bl0937" microID="${id}">
        <div class="block header">
          <svg class="icon">
            <use xlink:href="./icons.svg#default" />
          </svg>
          <h3 u-text="title"></h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <table style="width:100%;font-size:2rem">
            <tr>
              <td>
                <span u-text="power"></span> W
              </td>
              <td style="display:none">
                <span u-text="current"></span> mA
              </td>
              <td style="display:none">
                <span u-text="voltage"></span> V
              </td>
            </tr>
          </table>
          mode: <button u-action="mode" value="current">current</button>
          <button u-action="mode" value="voltage">voltage</button>
        </div>
      </div>

    </div>
  </div>

  <div id="modal" class="hidden">
    <div id="back" onclick="modal.close()"></div>
    <div id="container"></div>
  </div>

  <script>
    var panelObj = document.getElementById('panel');
    var addObj = document.getElementById('addButton');
    var sysObj = document.getElementById('sysButton');
    var refreshState = ''; // nothing in progress
    var updateTimer;

    // Element definitions and list of implemented elements
    var uElements = {
      defs: {},
      impl: [],
    }

    var params = getHashParams({
      sys: false
    });
    window.addEventListener('hashchange', function () {
      window.location.reload();
    });

    sysObj.addEventListener('click', function (evt) {
      params.sys = !toBool(params.sys);
      window.location.hash = 'sys=' + params.sys;
    });

    addObj.addEventListener('click', function (evt) {
      modal.open('newelementdlg');
    });

    // Element type reuse
    var alias = {
      "sht20": "dht",
      "displaysh1106": "displayssd1306"
    };

    hub.subscribe('/*/*', function (path, key, value) {
      if (path) {
        path = path.toLowerCase();
        var hElem = document.querySelector("[microID='" + path + "']");
        if (!hElem) {
          // create a new card
          var t = path.split('/')[1];
          var p = {
            id: path,
            type: t,
            icon: t
          };

          var def = uElements.defs[t];
          if (toBool(params.sys) || !def || toBool(def.sys) == false) {
            if ((def) && (def.icon)) {
              p.icon = def.icon;
            }
            var e = micro.insertTemplate(panelObj, t, p);
            if (!e) {
              t = alias[t] || 'generic';
              e = micro.insertTemplate(panelObj, t, p);
            }
          } // if
        } // if
      } // if
    }); // create new card

    hub.subscribe('/device/*?name', function (path, key, value) {
      document.title = value;
      document.querySelector("meta[name=application-name]").content = value;
    });


    /** 
    * @param {number} timeout time to next fetch in msecs.
    */
    function updateAsap(timeout) {
      if (!timeout) timeout = 50;

      if (refreshState == 'w') {
        // cancel longer running request
        window.clearTimeout(updateTimer);
        refreshState = '';
      }

      if (refreshState == '') {
        refreshState = 'w';
        updateTimer = window.setTimeout(
          function () {
            refreshState = 'f';
            fetch('/$board')
              .then(function (result) {
                return result.json();
              })
              .then(function (json) {
                hub.publishObj(json);
              })
              .finally(function (json) {
                refreshState = '';
                updateAsap(4000);
              });
          }, timeout);
      }
    } // updateAsap()


    // initiate a fetch with JSON response expected.
    async function fetchJSON(url, options) {
      var p = fetch(url, options)
        .then(function (result) {
          return (result.json());
        });
      return (p)
    }

    function init() {
      // load templates from other file.
      var p0 = Promise.allSettled([micro.loadFile('/board-templates.htm'), micro.loadFile('/board-new.htm')]);

      // implemented elements -> element definitions -> env.json -> config.json
      var p1 = fetchJSON('/$elements')
        .then(function (json) {
          uElements.impl = json;
        });

      var p2 = fetchJSON('/elements.json')
        .then(function (json) {
          uElements.defs = json;
        });


      var envData;
      var p3 = fetchJSON('/env.json')
        .then(function (json) {
          envData = json;
        });

      var configData;
      var p4 = fetchJSON('/config.json')
        .then(function (json) {
          configData = json;
        });

      Promise.allSettled([p0, p1, p2, p3, p4]).then(function () {
        // env data should be published before config data
        if (envData) {
          hub.write('env', JSON.stringify(envData));
          hub.publishObj(envData);
        }
        if (configData) {
          // adjust title locally
          for (var t in configData) for (var i in configData[t]) {
            if (!configData[t][i].title) configData[t][i].title = t + '/' + i;
          }
          hub.write('config', JSON.stringify(configData));
          hub.publishObj(configData);
        }
        updateAsap();
      });
    } // init()

    window.addEventListener('load', init);

    if (window !== window.top) {
      // disable header and navbar in portal mode.
      document.querySelector('.u-header').style.display = 'none';
      document.querySelector('.u-navbar').style.display = 'none';
    } // if
  </script>
</body>

</html>