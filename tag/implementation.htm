
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pages marked with a Implementation tag</title>
    <script src="/pages.js"></script>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/story.js" type="module"></script>
    <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
    <meta name='description' content='All pages related to the HomeDing System.'>
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>Pages marked with a Implementation tag</h1>
      
        
            <div class="plaincard">
            
            These pages contain information about the implementation of the HomeDing library and the Web UI to be uploaded into the flash memory based filesystem.

          </div>
        
        <h3><a href="/boards/index.htm">Boards and Processor modules</a></h3>
<blockquote>
<p>The HomeDing library can be used with Boards and Processor modules using the the ESP8266 and ESP32 chips from Espressif. In this overview some boards and devices can be found that are supported by the HomeDing library.</p>
</blockquote>
<h3><a href="/concepts/index.htm">Building Connected Things Concepts</a></h3>
<blockquote>
<p>The HomeDing library is made to build devices connected to a local WiFi network that deliver a full functional solution without the need to use a central server or external cloud services. Here are the conceptual ideas influencing the design of the HomeDing library.</p>
</blockquote>
<h3><a href="/concepts/paper01.htm">Building your own connected Things made easy</a></h3>
<blockquote></blockquote>
<h3><a href="/dev/classes.htm">Class implementation documentation</a></h3>
<blockquote>
<p>Beside the Element implementations in the \&lt;type\&gt;Element classes there are some classes that implement common functionality or utilities:</p>
</blockquote>
<h3><a href="/dev/cli.htm">Command Line CLI commands</a></h3>
<blockquote>
<p>Hints and details on how to control many devices using a command line approach.</p>
</blockquote>
<h3><a href="/dev/elementclass.htm">Common Functionality or Elements</a></h3>
<blockquote>
<p>Details on the common functionality provided by the Element base class.</p>
</blockquote>
<h3><a href="/concepts/paper05.htm">Device Discovery</a></h3>
<blockquote></blockquote>
<h3><a href="/elements/diag.htm">Diag Element</a></h3>
<blockquote>
<p>The DiagElement is part of the DevDing Example  and offers some additional diagnose information.</p>
</blockquote>
<h3><a href="/dev/displays.htm">Display Classes</a></h3>
<blockquote>
<p>The C++ Classes used for displays and their dependencies.</p>
</blockquote>
<h3><a href="/dev/elementregistry.htm">Element Registry</a></h3>
<blockquote>
<p>The ElementRegistry is the central class that knows all included and available Element classes to allow further creation and customization of new Elements by name at runtime.</p>
</blockquote>
<h3><a href="/concepts/paper03.htm">Elements and Actions</a></h3>
<blockquote></blockquote>
<h3><a href="/dev/microchart-gauge.htm">Gauge Microchart</a></h3>
<blockquote></blockquote>
<h3><a href="/dev/elementcards.htm">HTML Templates for Elements</a></h3>
<blockquote>
<p>For displaying elements of a HomeDing device on the config and landing pages of the <a href="/concepts/paper04.htm">Builtin Web server</a> there are is collection of templates by using a card design available.</p>
</blockquote>
<h3><a href="/dev/index.htm">Implementation Details</a></h3>
<blockquote>
<p>Hints and details on how to implement new and extend existing elements using an Arduino programming environment and how to implement new cards for the dashboards.</p>
</blockquote>
<h3><a href="/dev/microchart-line.htm">Line Microchart</a></h3>
<blockquote></blockquote>
<h3><a href="/dev/logger.htm">Logging</a></h3>
<blockquote></blockquote>
<h3><a href="/dev/microcharts.htm">Micro Charts</a></h3>
<blockquote></blockquote>
<h3><a href="/dev/dialogs.htm">Micro Dialogs and Forms</a></h3>
<blockquote>
<p>Simple User interactions using small forms.</p>
</blockquote>
<h3><a href="/dev/microjavascript.htm">Micro JavaScript Framework</a></h3>
<blockquote>
<p>The UI for HomeDing devices is  implementation by using a small and specialized clients side framework fousing on a small implementation footprint to make it usable in embedded devices.</p>
</blockquote>
<h3><a href="/dev/microtemplates.htm">Micro Templates</a></h3>
<blockquote>
<p>The Template mechanism in the micro framework is used for dynamically assembling the UI as specified in the device configuration by using templates.</p>
</blockquote>
<h3><a href="/dev/microchart-pie.htm">Pie Microchart</a></h3>
<blockquote></blockquote>
<h3><a href="/elements/sensors.htm">Sensor Element Implementation</a></h3>
<blockquote>
<p>Many Element implementations for sensors require the same functionality regarding timing and using properties and actions. The abstract SensorElement offers a base class that the specific Element implementations can derive from.</p>
</blockquote>
<h3><a href="/concepts/paper02.htm">Software and Library Architecture</a></h3>
<blockquote></blockquote>
<h3><a href="/dev/startup.htm">The Startup Sequence</a></h3>
<blockquote>
<p>After a reboot or when powering up the network connection needs to be established or configured and the operating mode is chosen based on counting reset cycles.</p>
</blockquote>
<h3><a href="/concepts/paper06.htm">The Web of Things (WoT)</a></h3>
<blockquote></blockquote>
<h3><a href="/dev/i2c.htm">Using the I2C bus</a></h3>
<blockquote>
<p>The I2C bus is used by many components, sensors, displays and other chips to communicate commands and data. A central configuration is supported on the device level.</p>
</blockquote>
<h3><a href="/dev/spi.htm">Using the SPI bus</a></h3>
<blockquote>
<p>The SPI bus is used by components that require fast communication like displays and memory. A central configuration is supported on the device level.</p>
</blockquote>
<h3><a href="/dev/deepsleep.htm">Using the deep sleep mode</a></h3>
<blockquote>
<p>The deep sleep mode allows saving energy consumption by powering down the device for a defined time to support situations where &quot;always on&quot; is not possible.</p>
</blockquote>
<h3><a href="/dev/manifest.htm">Web Manifest for HomeDing based devices</a></h3>
<blockquote></blockquote>
<h3><a href="/concepts/paper04.htm">WebServer and Web UI</a></h3>
<blockquote></blockquote>
<h3><a href="/dev/wifimanager.htm">WiFi Manager Details</a></h3>
<blockquote>
<p>The WiFi-Manager is a module in the HomeDing library to register a device in the local network. It is implemented in every device in the board class.
When the device has not been connected to the local home network the Wifi-Manager exposes a temporary, unprotected Wifi Network named HomeDingNNNNNN using the <a href="http://192.168.4.xxx">192.168.4.xxx</a> ip range. The device is always available on the URL &lt;<a href="http://192.168.4.1/&amp;gt;">http://192.168.4.1/&amp;gt;</a>.
Any device like mobile phone or laptop with WLAN can join this network for configuration.</p>
</blockquote>
<h2>See also</h2>
<ul>
<li><a href="/tag/index.htm">All Tags</a></li>
</ul>

        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>