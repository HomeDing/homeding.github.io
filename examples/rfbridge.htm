
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
    <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
    <title>RF Bridge Example</title>
    <meta name='description' content='--'>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/pages.js"></script>
    <script src="/story.js" type="module"></script>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>RF Bridge Example</h1>
      
        
            <div class="plaincard">
            
            This example has a local RFCodes Element to send and receive RF Signals using 433 MHz transmitters and receivers with the &lt;a href=&quot;https://github.com/mathertel/rfcodes&quot;&gt;RFCodes library&lt;/a&gt;. Some more Elements help to automate light and switch processes.

          </div>
        
        <p>The [RFCodes Element] depends on the <a href="https://github.com/mathertel/rfcodes">RFCodes library</a>
that you can find also through the Arduino library manager. Be sure to install it before
compiling/verifying/uploading.</p>
<ul>
<li>2 new elements</li>
<li>not in standard as only used for a gateway</li>
<li>can receive and send</li>
<li>needs xxxx library to be installed</li>
<li>proprietary RF singals can be added</li>
</ul>
<h2>RF sending device</h2>
<p>This example shows how to combine the Elements RFSend and Schedule to build a device that you can use to replace a RF sender
and also includes some basic scheduling features.
In this example you can also find a nice web UI for controlling the configured elements.</p>
<h2>RF probing</h2>
<p>include input, UI</p>
<h2>RF receiving</h2>
<p>MAP</p>
<h2>configure a command</h2>
<!-- reference to rfsend library -->
<p><a href="/elements/rfcodes.htm">RFCodes Element</a></p>

        
          <h2>Tags</h2>
          <div class="taglist">
            
              <a href="/tag/example.htm">Example</a>
            
              <a href="/tag/wip.htm">Wip</a>
            
          </div>
        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>