
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="google-site-verification" content="7tTF0t5uCMnyE6X31OIOQpcOf4QxWuODtyZLoVsKCEc"/>
    <meta name="msvalidate.01" content="7FC9C7BCD4002EBD89AAC2EF63D7B353"/>
    <link rel="icon" type="image/png" href="favicon48.png" sizes="48x48">
    <title>DevDing Example</title>
    <meta name='description' content='Examples and documentation for the HomeDing IoT Library'>
    <link content-type="text/css" href="/docstyle.css" rel="stylesheet"/>
    <script src="/pages.js"></script>
    <script src="/story.js" type="module"></script>
  </head>
  <body scroll="0" style="padding:0;">
    <div class="u-navbar" style="margin-bottom: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 48 48" id="menuButton" class="button" style="height:1.4rem">
        <path fill="white" d="M0 8h48v6H0zm0 13h48v6H0zm0 13h48v6H0z"/>
      </svg>
      <a href="/index.htm" class="button">Home</a>
      <a href="/elements/index.htm" class="button">Elements</a>
      <a href="/boards/index.htm" class="button">Boards</a>
      <a href="/recipes/index.htm" class="button">Recipes</a>
    </div>
    <nav></nav>
    <main style="padding:1rem;max-width: 800px;">
      <h1>DevDing Example</h1>
      
        <div class="plaincard"><p>The examples in the HomeDing library are used to compile a firmware that provides the base functionality
combined with a set of elements that can be used in the configuration of the device.</p>
<p>The <strong>DevDing example</strong> can be used with any board that has a 4MByte Flash memory like the <a href="/boards/nodemcu.htm">nodemcu boards</a>.
It is very like the <a href="/examples/standard.htm">standard example</a> but has some add-ons that help during development.</p>
</div>
<p>To setup the development environment and using a ESP8266 board in general please look into the description of the <a href="/examples/standard.htm">Standard Example</a>. Here the add-on featured for supporting development are described.</p>
<h2>Sketch file features</h2>
<p>The sketch file contains some more source code.</p>
<p>To initialize the remote debugging using the GDBStub implementation enable the <code>#define DBG_GDB</code> statement.</p>
<p>To set the trace level for all active elements to the most detailed level enable the <code>#define DBG_TRACE</code> statement.
The standard logging level in the device configuration enables tracing in the configuration phase when elements are created. This statement enables the TRACE level from the start.</p>
<p>To enable information about network connectivity enable the <code>#define NET_DEBUG</code> statement.</p>
<h2>Template Element</h2>
<p>This is an Element implementation that only contains the empty functions and some additional information as comments that help implementing new Elements.</p>
<p>The 2 files (TemplateElement.*) can be copied / renamed and the class name should be adjusted as well.</p>
<p>Then implement the inner part of the set, loop and other functions as required.</p>
<h2>Diag Element</h2>
<p>This element was developed to inject some functionality when a device starts up.</p>
<p>It lists some interesting information about the system to the log and then scans the I2C bus for existing devices.</p>
<h2>Beta Elements</h2>
<p>The DevDing example also acts as a place where unfinished elements in a beta state are available. They may disappear or show up in the regular library in future versions.</p>
<!-- ## Using a GDB debugger 

gdbstub_init();


The development sketch adds a software based debugger that allows setting a single breakpoint and inspecting variables.

This feature comes at it's cost:

* 10 kBytes more program memory usage to enable the debugger
* 2 kBytes more global variables resulting in
* 2 kBytes less heap memory space. -->
<h2>See also</h2>
<ul>
<li><a href="/examples/index.htm">examples</a></li>
<li><a href="/boards/index.htm">Boards overview</a></li>
<li><a href="/recipes/index.htm">Recipes</a></li>
</ul>

        
      </main>
      <script>
        const param = {
          MENU_MIN_WIDTH: 1030
        };
        var mbObj = document.querySelector('#menuButton');
        var navObj = document.querySelector('nav');
        if (window.innerWidth > param.MENU_MIN_WIDTH) { // menu is inside the page
          navObj.classList.add('open');
          navObj.classList.add('inpage');
        }
        mbObj.addEventListener('click', function (e) {
          navObj.classList.toggle('open');
        });
        lazyLoadHTM('nav', '/toc.htm');
      </script>

      <script type="module" async>
        import mermaid from "https://unpkg.com/mermaid@10/dist/mermaid.esm.min.mjs";
        document.addEventListener('DOMContentLoaded', mermaid.initialize({startOnLoad: true}));
      </script>

    </body>
  </body>
</html>