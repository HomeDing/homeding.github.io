<div u-control="modalNewElement" u-is="createElementDlg" class="card">
  <div class="block header">
    <h2>Add a new Element</h2>
    <div class="modalClose" onclick='closeModal()' style="background-color: red;text-align: center">&#x00D7;</div>
  </div>
  <div class="block" style="font-size: 1.4">
    <div class="form-group">
      <label>Type:</label>
      <select class="typeSelect">
        <option disabled selected="selected">Please select...</option>
      </select>
    </div>
    <div class="form-group">
      <label>ID:</label>
      <input placeholder="choose a name..." aria-label="theID" class="newID">
    </div>
    </div>

    <hr />
    <div class="block">
      <button class="next" style="float:right">Next</button>
    </div>
  </div>
</div>

<script>
  var CreateElementDlgBehavior = {
    objType: null,
    objID: null,

    connectedCallback: function () {
      var scope = this;

      this.objType = scope.querySelector('.typeSelect');
      this.objID = scope.querySelector('.newID');

      // get implemented elements and populate the dropdown
      fetch('/$elements')
        .then(function (result) {
          return (result.json())

        }).then(function (elList) {
          // fill options
          var sel = scope.objType;
          sel.innerHTML = '';
          elList.forEach(function (e) {
            var opt = document.createElement('option');
            opt.value = e;
            opt.textContent = e;
            sel.appendChild(opt);
          })
        });
    }, // init()

    onclick: function (evt /*:PointerEvent*/) {
      var src = evt.srcElement;
      if (src.classList.contains("next")) {
        if (this.objID.value === "") {
          alert('Please specify a name');
        } else {
          openModal('modalNewElement', {});
        }
      }
    }
  }; // CreateElementDlgBehavior

  micro.define("createElementDlg", CreateElementDlgBehavior);
</script>